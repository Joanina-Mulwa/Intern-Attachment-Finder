'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreClient = require('@azure/core-client');

/** Known values of {@link ResumeSkillSourcesItemSection} that the service accepts. */
(function (KnownResumeSkillSourcesItemSection) {
    KnownResumeSkillSourcesItemSection["Achievements"] = "Achievements";
    KnownResumeSkillSourcesItemSection["AdditionalInformation"] = "AdditionalInformation";
    KnownResumeSkillSourcesItemSection["Education"] = "Education";
    KnownResumeSkillSourcesItemSection["Extracurriculars"] = "Extracurriculars";
    KnownResumeSkillSourcesItemSection["Organisations"] = "Organisations";
    KnownResumeSkillSourcesItemSection["Other"] = "Other";
    KnownResumeSkillSourcesItemSection["PersonalDetails"] = "PersonalDetails";
    KnownResumeSkillSourcesItemSection["Projects"] = "Projects";
    KnownResumeSkillSourcesItemSection["Publications"] = "Publications";
    KnownResumeSkillSourcesItemSection["Referees"] = "Referees";
    KnownResumeSkillSourcesItemSection["Skills"] = "Skills";
    KnownResumeSkillSourcesItemSection["Summary"] = "Summary";
    KnownResumeSkillSourcesItemSection["Training"] = "Training";
    KnownResumeSkillSourcesItemSection["WorkExperience"] = "WorkExperience";
    KnownResumeSkillSourcesItemSection["NotPopulated"] = "NotPopulated";
    KnownResumeSkillSourcesItemSection["Header"] = "Header";
    KnownResumeSkillSourcesItemSection["Footer"] = "Footer";
})(exports.KnownResumeSkillSourcesItemSection || (exports.KnownResumeSkillSourcesItemSection = {}));
(function (KnownEnum1) {
    KnownEnum1["Resumes"] = "resumes";
    KnownEnum1["JobDescriptions"] = "job_descriptions";
})(exports.KnownEnum1 || (exports.KnownEnum1 = {}));
(function (KnownGetResponses200ContentApplicationJsonSchemaResultsItemDocumentType) {
    KnownGetResponses200ContentApplicationJsonSchemaResultsItemDocumentType["Resumes"] = "resumes";
    KnownGetResponses200ContentApplicationJsonSchemaResultsItemDocumentType["JobDescriptions"] = "job_descriptions";
})(exports.KnownGetResponses200ContentApplicationJsonSchemaResultsItemDocumentType || (exports.KnownGetResponses200ContentApplicationJsonSchemaResultsItemDocumentType = {}));
(function (KnownPostContentSchemaDocumentType) {
    KnownPostContentSchemaDocumentType["Resumes"] = "resumes";
    KnownPostContentSchemaDocumentType["JobDescriptions"] = "job_descriptions";
})(exports.KnownPostContentSchemaDocumentType || (exports.KnownPostContentSchemaDocumentType = {}));
(function (KnownEnum4) {
    KnownEnum4["Resumes"] = "resumes";
    KnownEnum4["JobDescriptions"] = "job_descriptions";
})(exports.KnownEnum4 || (exports.KnownEnum4 = {}));

const GetAllDocumentsResults = {
    type: {
        name: "Composite",
        className: "GetAllDocumentsResults",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            next: {
                serializedName: "next",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            previous: {
                serializedName: "previous",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Meta"
                        }
                    }
                }
            }
        }
    }
};
const Meta = {
    type: {
        name: "Composite",
        className: "Meta",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            fileName: {
                serializedName: "fileName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            ready: {
                serializedName: "ready",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            readyDt: {
                serializedName: "readyDt",
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            failed: {
                serializedName: "failed",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            expiryTime: {
                serializedName: "expiryTime",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            language: {
                serializedName: "language",
                type: {
                    name: "String"
                }
            },
            pdf: {
                serializedName: "pdf",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parentDocument: {
                serializedName: "parentDocument",
                type: {
                    name: "Composite",
                    className: "SplitRelation"
                }
            },
            childDocuments: {
                serializedName: "childDocuments",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SplitRelation"
                        }
                    }
                }
            },
            pages: {
                serializedName: "pages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PageMeta"
                        }
                    }
                }
            }
        }
    }
};
const SplitRelation = {
    type: {
        name: "Composite",
        className: "SplitRelation",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageMeta = {
    type: {
        name: "Composite",
        className: "PageMeta",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "Number"
                }
            },
            pageIndex: {
                serializedName: "pageIndex",
                type: {
                    name: "Number"
                }
            },
            image: {
                serializedName: "image",
                type: {
                    name: "String"
                }
            },
            height: {
                serializedName: "height",
                type: {
                    name: "Number"
                }
            },
            width: {
                serializedName: "width",
                type: {
                    name: "Number"
                }
            },
            rotation: {
                serializedName: "rotation",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const RequestError = {
    type: {
        name: "Composite",
        className: "RequestError",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            errors: {
                serializedName: "errors",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RequestErrorErrorsItem"
                        }
                    }
                }
            }
        }
    }
};
const RequestErrorErrorsItem = {
    type: {
        name: "Composite",
        className: "RequestErrorErrorsItem",
        modelProperties: {
            attr: {
                serializedName: "attr",
                required: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            detail: {
                serializedName: "detail",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResumeData = {
    type: {
        name: "Composite",
        className: "ResumeData",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "ResumeDataName"
                }
            },
            phoneNumbers: {
                serializedName: "phoneNumbers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            websites: {
                serializedName: "websites",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            emails: {
                serializedName: "emails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            dateOfBirth: {
                serializedName: "dateOfBirth",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "Location"
                }
            },
            objective: {
                serializedName: "objective",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            languages: {
                serializedName: "languages",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            languageCodes: {
                serializedName: "languageCodes",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            summary: {
                serializedName: "summary",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            totalYearsExperience: {
                serializedName: "totalYearsExperience",
                type: {
                    name: "Number"
                }
            },
            headShot: {
                serializedName: "headShot",
                readOnly: true,
                nullable: true,
                type: {
                    name: "ByteArray"
                }
            },
            education: {
                serializedName: "education",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeDataEducationItem"
                        }
                    }
                }
            },
            profession: {
                serializedName: "profession",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            linkedin: {
                serializedName: "linkedin",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            workExperience: {
                serializedName: "workExperience",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeDataWorkExperienceItem"
                        }
                    }
                }
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeDataSkillsItem"
                        }
                    }
                }
            },
            certifications: {
                serializedName: "certifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            publications: {
                serializedName: "publications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            referees: {
                serializedName: "referees",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeDataRefereesItem"
                        }
                    }
                }
            },
            sections: {
                serializedName: "sections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeDataSectionsItem"
                        }
                    }
                }
            },
            isResumeProbability: {
                serializedName: "isResumeProbability",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            rawText: {
                serializedName: "rawText",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResumeDataName = {
    type: {
        name: "Composite",
        className: "ResumeDataName",
        modelProperties: {
            raw: {
                serializedName: "raw",
                type: {
                    name: "String"
                }
            },
            first: {
                serializedName: "first",
                type: {
                    name: "String"
                }
            },
            last: {
                serializedName: "last",
                type: {
                    name: "String"
                }
            },
            middle: {
                serializedName: "middle",
                type: {
                    name: "String"
                }
            },
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Location = {
    type: {
        name: "Composite",
        className: "Location",
        modelProperties: {
            formatted: {
                serializedName: "formatted",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            postalCode: {
                serializedName: "postalCode",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            state: {
                serializedName: "state",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            country: {
                serializedName: "country",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            countryCode: {
                serializedName: "countryCode",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            rawInput: {
                serializedName: "rawInput",
                required: true,
                type: {
                    name: "String"
                }
            },
            streetNumber: {
                serializedName: "streetNumber",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            street: {
                serializedName: "street",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            apartmentNumber: {
                serializedName: "apartmentNumber",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            city: {
                serializedName: "city",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResumeDataEducationItem = {
    type: {
        name: "Composite",
        className: "ResumeDataEducationItem",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "Number"
                }
            },
            organization: {
                serializedName: "organization",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            accreditation: {
                serializedName: "accreditation",
                type: {
                    name: "Composite",
                    className: "ResumeDataEducationItemAccreditation"
                }
            },
            grade: {
                serializedName: "grade",
                type: {
                    name: "Composite",
                    className: "ResumeDataEducationItemGrade"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "Location"
                }
            },
            dates: {
                serializedName: "dates",
                type: {
                    name: "Composite",
                    className: "ResumeDataEducationItemDates"
                }
            }
        }
    }
};
const ResumeDataEducationItemAccreditation = {
    type: {
        name: "Composite",
        className: "ResumeDataEducationItemAccreditation",
        modelProperties: {
            education: {
                serializedName: "education",
                type: {
                    name: "String"
                }
            },
            inputStr: {
                serializedName: "inputStr",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            matchStr: {
                serializedName: "matchStr",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            educationLevel: {
                serializedName: "educationLevel",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResumeDataEducationItemGrade = {
    type: {
        name: "Composite",
        className: "ResumeDataEducationItemGrade",
        modelProperties: {
            raw: {
                serializedName: "raw",
                type: {
                    name: "String"
                }
            },
            metric: {
                serializedName: "metric",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResumeDataEducationItemDates = {
    type: {
        name: "Composite",
        className: "ResumeDataEducationItemDates",
        modelProperties: {
            completionDate: {
                serializedName: "completionDate",
                type: {
                    name: "Date"
                }
            },
            isCurrent: {
                serializedName: "isCurrent",
                type: {
                    name: "Boolean"
                }
            },
            startDate: {
                serializedName: "startDate",
                nullable: true,
                type: {
                    name: "Date"
                }
            }
        }
    }
};
const ResumeDataWorkExperienceItem = {
    type: {
        name: "Composite",
        className: "ResumeDataWorkExperienceItem",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "Number"
                }
            },
            jobTitle: {
                serializedName: "jobTitle",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            socCode: {
                serializedName: "socCode",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            socName: {
                serializedName: "socName",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            organization: {
                serializedName: "organization",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            industry: {
                serializedName: "industry",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "Location"
                }
            },
            jobDescription: {
                serializedName: "jobDescription",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            dates: {
                serializedName: "dates",
                type: {
                    name: "Composite",
                    className: "ResumeDataWorkExperienceItemDates"
                }
            },
            occupation: {
                serializedName: "occupation",
                type: {
                    name: "Composite",
                    className: "ResumeDataWorkExperienceItemOccupation"
                }
            }
        }
    }
};
const ResumeDataWorkExperienceItemDates = {
    type: {
        name: "Composite",
        className: "ResumeDataWorkExperienceItemDates",
        modelProperties: {
            startDate: {
                serializedName: "startDate",
                nullable: true,
                type: {
                    name: "Date"
                }
            },
            endDate: {
                serializedName: "endDate",
                nullable: true,
                type: {
                    name: "Date"
                }
            },
            monthsInPosition: {
                serializedName: "monthsInPosition",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            isCurrent: {
                serializedName: "isCurrent",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ResumeDataWorkExperienceItemOccupation = {
    type: {
        name: "Composite",
        className: "ResumeDataWorkExperienceItemOccupation",
        modelProperties: {
            jobTitle: {
                serializedName: "jobTitle",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            jobTitleNormalized: {
                serializedName: "jobTitleNormalized",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            managementLevel: {
                serializedName: "managementLevel",
                nullable: true,
                type: {
                    name: "Enum",
                    allowedValues: ["None", "Low", "Mid", "Upper"]
                }
            },
            classification: {
                serializedName: "classification",
                type: {
                    name: "Composite",
                    className: "Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification"
                }
            }
        }
    }
};
const Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification = {
    type: {
        name: "Composite",
        className: "Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification",
        modelProperties: {
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            minorGroup: {
                serializedName: "minorGroup",
                type: {
                    name: "String"
                }
            },
            subMajorGroup: {
                serializedName: "subMajorGroup",
                type: {
                    name: "String"
                }
            },
            majorGroup: {
                serializedName: "majorGroup",
                type: {
                    name: "String"
                }
            },
            socCode: {
                serializedName: "socCode",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ResumeDataSkillsItem = {
    type: {
        name: "Composite",
        className: "ResumeDataSkillsItem",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "Number"
                }
            },
            emsiId: {
                serializedName: "emsiId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            lastUsed: {
                serializedName: "lastUsed",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            numberOfMonths: {
                serializedName: "numberOfMonths",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            count: {
                serializedName: "count",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            weighting: {
                serializedName: "weighting",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            sources: {
                serializedName: "sources",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeDataSkillsPropertiesItemsItem"
                        }
                    }
                }
            }
        }
    }
};
const ResumeDataSkillsPropertiesItemsItem = {
    type: {
        name: "Composite",
        className: "ResumeDataSkillsPropertiesItemsItem",
        modelProperties: {
            section: {
                serializedName: "section",
                type: {
                    name: "String"
                }
            },
            position: {
                serializedName: "position",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            workExperienceId: {
                serializedName: "workExperienceId",
                nullable: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ResumeDataRefereesItem = {
    type: {
        name: "Composite",
        className: "ResumeDataRefereesItem",
        modelProperties: {
            name: {
                serializedName: "name",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            text: {
                serializedName: "text",
                type: {
                    name: "String"
                }
            },
            email: {
                serializedName: "email",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            number: {
                serializedName: "number",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResumeDataSectionsItem = {
    type: {
        name: "Composite",
        className: "ResumeDataSectionsItem",
        modelProperties: {
            sectionType: {
                serializedName: "sectionType",
                type: {
                    name: "String"
                }
            },
            bbox: {
                constraints: {
                    MinItems: 4,
                    MaxItems: 4
                },
                serializedName: "bbox",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            pageIndex: {
                serializedName: "pageIndex",
                type: {
                    name: "Number"
                }
            },
            text: {
                serializedName: "text",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resume = {
    type: {
        name: "Composite",
        className: "Resume",
        modelProperties: {
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "ResumeData"
                }
            },
            meta: {
                serializedName: "meta",
                type: {
                    name: "Composite",
                    className: "Meta"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            }
        }
    }
};
const ErrorModel = {
    type: {
        name: "Composite",
        className: "ErrorModel",
        modelProperties: {
            errorCode: {
                serializedName: "errorCode",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            errorDetail: {
                serializedName: "errorDetail",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RedactedResume = {
    type: {
        name: "Composite",
        className: "RedactedResume",
        modelProperties: {
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "RedactedResumeData"
                }
            },
            meta: {
                serializedName: "meta",
                type: {
                    name: "Composite",
                    className: "Meta"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            }
        }
    }
};
const RedactedResumeData = {
    type: {
        name: "Composite",
        className: "RedactedResumeData",
        modelProperties: {
            redactedPdf: {
                serializedName: "redactedPdf",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResumeSearchParameters = {
    type: {
        name: "Composite",
        className: "ResumeSearchParameters",
        modelProperties: {
            indices: {
                serializedName: "indices",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            jobDescription: {
                serializedName: "jobDescription",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            resume: {
                serializedName: "resume",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            jobTitles: {
                serializedName: "jobTitles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            jobTitlesCurrentOnly: {
                serializedName: "jobTitlesCurrentOnly",
                type: {
                    name: "Boolean"
                }
            },
            jobTitlesRequired: {
                serializedName: "jobTitlesRequired",
                type: {
                    name: "Boolean"
                }
            },
            jobTitlesWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "jobTitlesWeight",
                type: {
                    name: "Number"
                }
            },
            yearsExperienceMin: {
                serializedName: "yearsExperienceMin",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            yearsExperienceMax: {
                serializedName: "yearsExperienceMax",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            yearsExperienceRequired: {
                serializedName: "yearsExperienceRequired",
                type: {
                    name: "Boolean"
                }
            },
            yearsExperienceWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "yearsExperienceWeight",
                type: {
                    name: "Number"
                }
            },
            locations: {
                serializedName: "locations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersLocation"
                        }
                    }
                }
            },
            locationsWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "locationsWeight",
                type: {
                    name: "Number"
                }
            },
            locationsRequired: {
                serializedName: "locationsRequired",
                type: {
                    name: "Boolean"
                }
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill"
                        }
                    }
                }
            },
            skillsWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "skillsWeight",
                type: {
                    name: "Number"
                }
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill"
                        }
                    }
                }
            },
            languagesWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "languagesWeight",
                type: {
                    name: "Number"
                }
            },
            institutions: {
                serializedName: "institutions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            institutionsRequired: {
                serializedName: "institutionsRequired",
                type: {
                    name: "Boolean"
                }
            },
            degrees: {
                serializedName: "degrees",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            degreesRequired: {
                serializedName: "degreesRequired",
                type: {
                    name: "Boolean"
                }
            },
            highestDegreeTypes: {
                constraints: {
                    UniqueItems: true
                },
                serializedName: "highestDegreeTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "school",
                                "certificate",
                                "bachelors",
                                "masters",
                                "doctoral"
                            ]
                        }
                    }
                }
            },
            highestDegreeTypesRequired: {
                serializedName: "highestDegreeTypesRequired",
                type: {
                    name: "Boolean"
                }
            },
            isCurrentStudent: {
                serializedName: "isCurrentStudent",
                type: {
                    name: "Boolean"
                }
            },
            isCurrentStudentRequired: {
                serializedName: "isCurrentStudentRequired",
                type: {
                    name: "Boolean"
                }
            },
            isRecentGraduate: {
                serializedName: "isRecentGraduate",
                type: {
                    name: "Boolean"
                }
            },
            isRecentGraduateRequired: {
                serializedName: "isRecentGraduateRequired",
                type: {
                    name: "Boolean"
                }
            },
            isTopStudent: {
                serializedName: "isTopStudent",
                type: {
                    name: "Boolean"
                }
            },
            isTopStudentRequired: {
                serializedName: "isTopStudentRequired",
                type: {
                    name: "Boolean"
                }
            },
            educationWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "educationWeight",
                type: {
                    name: "Number"
                }
            },
            searchExpression: {
                serializedName: "searchExpression",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            searchExpressionRequired: {
                serializedName: "searchExpressionRequired",
                type: {
                    name: "Boolean"
                }
            },
            searchExpressionWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "searchExpressionWeight",
                type: {
                    name: "Number"
                }
            },
            socCodes: {
                serializedName: "socCodes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            socCodesWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "socCodesWeight",
                type: {
                    name: "Number"
                }
            },
            socCodesRequired: {
                serializedName: "socCodesRequired",
                type: {
                    name: "Boolean"
                }
            },
            managementLevel: {
                serializedName: "managementLevel",
                nullable: true,
                type: {
                    name: "Enum",
                    allowedValues: ["None", "Low", "Mid", "Upper"]
                }
            },
            managementLevelRequired: {
                serializedName: "managementLevelRequired",
                type: {
                    name: "Boolean"
                }
            },
            managementLevelWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "managementLevelWeight",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ResumeSearchParametersLocation = {
    type: {
        name: "Composite",
        className: "ResumeSearchParametersLocation",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            coordinates: {
                serializedName: "coordinates",
                type: {
                    name: "Composite",
                    className: "ResumeSearchParametersLocationCoordinates"
                }
            },
            distance: {
                serializedName: "distance",
                type: {
                    name: "Number"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "Enum",
                    allowedValues: ["km", "mi"]
                }
            }
        }
    }
};
const ResumeSearchParametersLocationCoordinates = {
    type: {
        name: "Composite",
        className: "ResumeSearchParametersLocationCoordinates",
        modelProperties: {
            latitude: {
                serializedName: "latitude",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            longitude: {
                serializedName: "longitude",
                nullable: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ResumeSearchParametersSkill = {
    type: {
        name: "Composite",
        className: "ResumeSearchParametersSkill",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            required: {
                serializedName: "required",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ResumeSearch = {
    type: {
        name: "Composite",
        className: "ResumeSearch",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            next: {
                serializedName: "next",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            previous: {
                serializedName: "previous",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "ResumeSearchParameters"
                }
            },
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchResult"
                        }
                    }
                }
            }
        }
    }
};
const ResumeSearchResult = {
    type: {
        name: "Composite",
        className: "ResumeSearchResult",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            score: {
                serializedName: "score",
                required: true,
                type: {
                    name: "Number"
                }
            },
            pdf: {
                serializedName: "pdf",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            jobTitle: {
                serializedName: "jobTitle",
                type: {
                    name: "Composite",
                    className: "JobTitleSearchScoreComponent"
                }
            },
            managementLevel: {
                serializedName: "managementLevel",
                type: {
                    name: "Composite",
                    className: "ManagementLevelSearchScoreComponent"
                }
            },
            experience: {
                serializedName: "experience",
                type: {
                    name: "Composite",
                    className: "ExperienceSearchScoreComponent"
                }
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Composite",
                    className: "SkillsSearchScoreComponent"
                }
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Composite",
                    className: "LanguagesSearchScoreComponent"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "LocationSearchScoreComponent"
                }
            },
            education: {
                serializedName: "education",
                type: {
                    name: "Composite",
                    className: "EducationSearchScoreComponent"
                }
            },
            occupationGroup: {
                serializedName: "occupationGroup",
                type: {
                    name: "Composite",
                    className: "OccupationGroupSearchScoreComponent"
                }
            },
            searchExpression: {
                serializedName: "searchExpression",
                type: {
                    name: "Composite",
                    className: "SearchExpressionSearchScoreComponent"
                }
            }
        }
    }
};
const JobTitleSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "JobTitleSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String"
                }
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ManagementLevelSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "ManagementLevelSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String"
                }
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ExperienceSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "ExperienceSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String"
                }
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SkillsSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "SkillsSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String"
                }
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const LanguagesSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "LanguagesSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String"
                }
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const LocationSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "LocationSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String"
                }
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const EducationSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "EducationSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String"
                }
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const OccupationGroupSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "OccupationGroupSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String"
                }
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SearchExpressionSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "SearchExpressionSearchScoreComponent",
        modelProperties: {
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ResumeSearchDetail = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetail",
        modelProperties: {
            jobTitle: {
                serializedName: "jobTitle",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailJobTitle"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailLocation"
                }
            },
            education: {
                serializedName: "education",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailEducation"
                }
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailSkills"
                }
            },
            experience: {
                serializedName: "experience",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailExperience"
                }
            },
            occupationGroup: {
                serializedName: "occupationGroup",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailOccupationGroup"
                }
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailLanguages"
                }
            },
            managementLevel: {
                serializedName: "managementLevel",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailManagementLevel"
                }
            },
            searchExpression: {
                serializedName: "searchExpression",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailSearchExpression"
                }
            }
        }
    }
};
const ResumeSearchDetailJobTitle = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailJobTitle",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchDetailJobTitleValueItem"
                        }
                    }
                }
            }
        }
    }
};
const ResumeSearchDetailJobTitleValueItem = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailJobTitleValueItem",
        modelProperties: {
            name: {
                serializedName: "name",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            startDate: {
                serializedName: "startDate",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            endDate: {
                serializedName: "endDate",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            companyName: {
                serializedName: "companyName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ResumeSearchDetailLocation = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailLocation",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersLocation"
                        }
                    }
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailLocationValue"
                }
            }
        }
    }
};
const ComponentsN9ShogSchemasResumesearchdetailPropertiesLocationPropertiesValueAllof1 = {
    type: {
        name: "Composite",
        className: "ComponentsN9ShogSchemasResumesearchdetailPropertiesLocationPropertiesValueAllof1",
        modelProperties: {
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ResumeSearchDetailEducation = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailEducation",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailEducationMissing"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchDetailEducationValueItem"
                        }
                    }
                }
            }
        }
    }
};
const ResumeSearchDetailEducationMissing = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailEducationMissing",
        modelProperties: {
            degrees: {
                serializedName: "degrees",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            highestDegreeTypes: {
                serializedName: "highestDegreeTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            institutions: {
                serializedName: "institutions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            currentStudent: {
                serializedName: "currentStudent",
                type: {
                    name: "Boolean"
                }
            },
            recentGraduate: {
                serializedName: "recentGraduate",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const Education = {
    type: {
        name: "Composite",
        className: "Education",
        modelProperties: {
            organization: {
                serializedName: "organization",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            accreditation: {
                serializedName: "accreditation",
                type: {
                    name: "Composite",
                    className: "Accreditation"
                }
            },
            grade: {
                serializedName: "grade",
                type: {
                    name: "Composite",
                    className: "EducationGrade"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "Location"
                }
            },
            dates: {
                serializedName: "dates",
                type: {
                    name: "Composite",
                    className: "EducationDates"
                }
            }
        }
    }
};
const Accreditation = {
    type: {
        name: "Composite",
        className: "Accreditation",
        modelProperties: {
            education: {
                serializedName: "education",
                type: {
                    name: "String"
                }
            },
            educationLevel: {
                serializedName: "educationLevel",
                type: {
                    name: "String"
                }
            },
            inputStr: {
                serializedName: "inputStr",
                type: {
                    name: "String"
                }
            },
            matchStr: {
                serializedName: "matchStr",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EducationGrade = {
    type: {
        name: "Composite",
        className: "EducationGrade",
        modelProperties: {
            raw: {
                serializedName: "raw",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            metric: {
                serializedName: "metric",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EducationDates = {
    type: {
        name: "Composite",
        className: "EducationDates",
        modelProperties: {
            startDate: {
                serializedName: "startDate",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            completionDate: {
                serializedName: "completionDate",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            isCurrent: {
                serializedName: "isCurrent",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ComponentsSxu0N3SchemasResumesearchdetailPropertiesEducationPropertiesValueItemsAllof1 = {
    type: {
        name: "Composite",
        className: "ComponentsSxu0N3SchemasResumesearchdetailPropertiesEducationPropertiesValueItemsAllof1",
        modelProperties: {
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ResumeSearchDetailSkills = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailSkills",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill"
                        }
                    }
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchDetailSkillsValueItem"
                        }
                    }
                }
            }
        }
    }
};
const ResumeSkill = {
    type: {
        name: "Composite",
        className: "ResumeSkill",
        modelProperties: {
            name: {
                serializedName: "name",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            lastUsed: {
                serializedName: "lastUsed",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            numberOfMonths: {
                serializedName: "numberOfMonths",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            type: {
                serializedName: "type",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            sources: {
                serializedName: "sources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSkillSourcesItem"
                        }
                    }
                }
            }
        }
    }
};
const ResumeSkillSourcesItem = {
    type: {
        name: "Composite",
        className: "ResumeSkillSourcesItem",
        modelProperties: {
            section: {
                serializedName: "section",
                type: {
                    name: "String"
                }
            },
            position: {
                serializedName: "position",
                nullable: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1 = {
    type: {
        name: "Composite",
        className: "ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1",
        modelProperties: {
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ResumeSearchDetailExperience = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailExperience",
        modelProperties: {
            years: {
                serializedName: "years",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ResumeSearchDetailOccupationGroup = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailOccupationGroup",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchDetailOccupationGroupValueItem"
                        }
                    }
                }
            }
        }
    }
};
const OccupationGroup = {
    type: {
        name: "Composite",
        className: "OccupationGroup",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            children: {
                serializedName: "children",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OccupationGroup"
                        }
                    }
                }
            }
        }
    }
};
const ComponentsK7P1F5SchemasResumesearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1 = {
    type: {
        name: "Composite",
        className: "ComponentsK7P1F5SchemasResumesearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1",
        modelProperties: {
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ResumeSearchDetailLanguages = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailLanguages",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill"
                        }
                    }
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchDetailLanguagesValueItem"
                        }
                    }
                }
            }
        }
    }
};
const Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1 = {
    type: {
        name: "Composite",
        className: "Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1",
        modelProperties: {
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ResumeSearchDetailManagementLevel = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailManagementLevel",
        modelProperties: {
            level: {
                serializedName: "level",
                nullable: true,
                type: {
                    name: "Enum",
                    allowedValues: ["None", "Low", "Mid", "Upper"]
                }
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ResumeSearchDetailSearchExpression = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailSearchExpression",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ResumeSearchMatch = {
    type: {
        name: "Composite",
        className: "ResumeSearchMatch",
        modelProperties: {
            score: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "score",
                type: {
                    name: "Number"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Composite",
                    className: "ResumeSearchMatchDetails"
                }
            }
        }
    }
};
const ResumeSearchMatchDetails = {
    type: {
        name: "Composite",
        className: "ResumeSearchMatchDetails",
        modelProperties: {
            jobTitle: {
                serializedName: "jobTitle",
                type: {
                    name: "Composite",
                    className: "JobTitleSearchScoreComponent"
                }
            },
            managementLevel: {
                serializedName: "managementLevel",
                type: {
                    name: "Composite",
                    className: "ManagementLevelSearchScoreComponent"
                }
            },
            experience: {
                serializedName: "experience",
                type: {
                    name: "Composite",
                    className: "ExperienceSearchScoreComponent"
                }
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Composite",
                    className: "SkillsSearchScoreComponent"
                }
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Composite",
                    className: "LanguagesSearchScoreComponent"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "LocationSearchScoreComponent"
                }
            },
            education: {
                serializedName: "education",
                type: {
                    name: "Composite",
                    className: "EducationSearchScoreComponent"
                }
            },
            occupationGroup: {
                serializedName: "occupationGroup",
                type: {
                    name: "Composite",
                    className: "OccupationGroupSearchScoreComponent"
                }
            },
            searchExpression: {
                serializedName: "searchExpression",
                type: {
                    name: "Composite",
                    className: "SearchExpressionSearchScoreComponent"
                }
            }
        }
    }
};
const ResumeSearchConfig = {
    type: {
        name: "Composite",
        className: "ResumeSearchConfig",
        modelProperties: {
            allowPdfDownload: {
                serializedName: "allowPdfDownload",
                type: {
                    name: "Boolean"
                }
            },
            maxResults: {
                serializedName: "maxResults",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            displayJobTitle: {
                serializedName: "displayJobTitle",
                type: {
                    name: "Boolean"
                }
            },
            displayLocation: {
                serializedName: "displayLocation",
                type: {
                    name: "Boolean"
                }
            },
            displayYearsExperience: {
                serializedName: "displayYearsExperience",
                type: {
                    name: "Boolean"
                }
            },
            displayOccupationGroup: {
                serializedName: "displayOccupationGroup",
                type: {
                    name: "Boolean"
                }
            },
            displayEducation: {
                serializedName: "displayEducation",
                type: {
                    name: "Boolean"
                }
            },
            displaySkills: {
                serializedName: "displaySkills",
                type: {
                    name: "Boolean"
                }
            },
            displayLanguages: {
                serializedName: "displayLanguages",
                type: {
                    name: "Boolean"
                }
            },
            displayManagementLevel: {
                serializedName: "displayManagementLevel",
                type: {
                    name: "Boolean"
                }
            },
            displayKeywords: {
                serializedName: "displayKeywords",
                type: {
                    name: "Boolean"
                }
            },
            weightJobTitle: {
                serializedName: "weightJobTitle",
                type: {
                    name: "Number"
                }
            },
            weightLocation: {
                serializedName: "weightLocation",
                type: {
                    name: "Number"
                }
            },
            weightYearsExperience: {
                serializedName: "weightYearsExperience",
                type: {
                    name: "Number"
                }
            },
            weightOccupationGroup: {
                serializedName: "weightOccupationGroup",
                type: {
                    name: "Number"
                }
            },
            weightEducation: {
                serializedName: "weightEducation",
                type: {
                    name: "Number"
                }
            },
            weightSkills: {
                serializedName: "weightSkills",
                type: {
                    name: "Number"
                }
            },
            weightLanguages: {
                serializedName: "weightLanguages",
                type: {
                    name: "Number"
                }
            },
            weightManagementLevel: {
                serializedName: "weightManagementLevel",
                type: {
                    name: "Number"
                }
            },
            weightKeywords: {
                serializedName: "weightKeywords",
                type: {
                    name: "Number"
                }
            },
            indices: {
                serializedName: "indices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            searchToolTheme: {
                serializedName: "searchToolTheme",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            userId: {
                serializedName: "userId",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            username: {
                serializedName: "username",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Paths2T1Oc0ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "Paths2T1Oc0ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema",
        modelProperties: {
            configOverride: {
                serializedName: "configOverride",
                type: {
                    name: "Composite",
                    className: "ResumeSearchConfig"
                }
            }
        }
    }
};
const ResumeSearchEmbed = {
    type: {
        name: "Composite",
        className: "ResumeSearchEmbed",
        modelProperties: {
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GetAllJobDescriptionsResults = {
    type: {
        name: "Composite",
        className: "GetAllJobDescriptionsResults",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            next: {
                serializedName: "next",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            previous: {
                serializedName: "previous",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Meta"
                        }
                    }
                }
            }
        }
    }
};
const JobDescription = {
    type: {
        name: "Composite",
        className: "JobDescription",
        modelProperties: {
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "JobDescriptionData"
                }
            },
            meta: {
                serializedName: "meta",
                type: {
                    name: "Composite",
                    className: "Meta"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            }
        }
    }
};
const JobDescriptionData = {
    type: {
        name: "Composite",
        className: "JobDescriptionData",
        modelProperties: {
            jobTitle: {
                serializedName: "jobTitle",
                type: {
                    name: "Composite",
                    className: "JobTitleAnnotation"
                }
            },
            contactEmail: {
                serializedName: "contactEmail",
                type: {
                    name: "Composite",
                    className: "TextAnnotation"
                }
            },
            contactName: {
                serializedName: "contactName",
                type: {
                    name: "Composite",
                    className: "TextAnnotation"
                }
            },
            contactPhone: {
                serializedName: "contactPhone",
                type: {
                    name: "Composite",
                    className: "TextAnnotation"
                }
            },
            startDate: {
                serializedName: "startDate",
                type: {
                    name: "Composite",
                    className: "DateAnnotation"
                }
            },
            endDate: {
                serializedName: "endDate",
                type: {
                    name: "Composite",
                    className: "DateAnnotation"
                }
            },
            jobType: {
                serializedName: "jobType",
                type: {
                    name: "Composite",
                    className: "TextAnnotation"
                }
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LanguageAnnotation"
                        }
                    }
                }
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkillAnnotation"
                        }
                    }
                }
            },
            organizationName: {
                serializedName: "organizationName",
                type: {
                    name: "Composite",
                    className: "TextAnnotation"
                }
            },
            organizationWebsite: {
                serializedName: "organizationWebsite",
                type: {
                    name: "Composite",
                    className: "TextAnnotation"
                }
            },
            educationLevel: {
                serializedName: "educationLevel",
                type: {
                    name: "Composite",
                    className: "TextAnnotation"
                }
            },
            educationAccreditation: {
                serializedName: "educationAccreditation",
                type: {
                    name: "Composite",
                    className: "TextAnnotation"
                }
            },
            expectedRemuneration: {
                serializedName: "expectedRemuneration",
                type: {
                    name: "Composite",
                    className: "ExpectedRemunerationAnnotation"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "LocationAnnotation"
                }
            },
            certifications: {
                serializedName: "certifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TextAnnotation"
                        }
                    }
                }
            },
            yearsExperience: {
                serializedName: "yearsExperience",
                type: {
                    name: "Composite",
                    className: "YearsExperienceAnnotation"
                }
            }
        }
    }
};
const JobTitleAnnotationParsed = {
    type: {
        name: "Composite",
        className: "JobTitleAnnotationParsed",
        modelProperties: {
            name: {
                serializedName: "name",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            managementLevel: {
                serializedName: "managementLevel",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            classification: {
                serializedName: "classification",
                type: {
                    name: "Composite",
                    className: "JobTitleAnnotationParsedClassification"
                }
            }
        }
    }
};
const JobTitleAnnotationParsedClassification = {
    type: {
        name: "Composite",
        className: "JobTitleAnnotationParsedClassification",
        modelProperties: {
            socCode: {
                serializedName: "socCode",
                type: {
                    name: "Number"
                }
            },
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            minorGroup: {
                serializedName: "minorGroup",
                type: {
                    name: "String"
                }
            },
            subMajorGroup: {
                serializedName: "subMajorGroup",
                type: {
                    name: "String"
                }
            },
            majorGroup: {
                serializedName: "majorGroup",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Annotation = {
    type: {
        name: "Composite",
        className: "Annotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            id: {
                serializedName: "id",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            rectangle: {
                serializedName: "rectangle",
                type: {
                    name: "Composite",
                    className: "Rectangle"
                }
            },
            pageIndex: {
                serializedName: "pageIndex",
                required: true,
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            raw: {
                serializedName: "raw",
                required: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            confidence: {
                serializedName: "confidence",
                required: true,
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            isVerified: {
                serializedName: "isVerified",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            classification: {
                serializedName: "classification",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Rectangle = {
    type: {
        name: "Composite",
        className: "Rectangle",
        modelProperties: {
            x0: {
                serializedName: "x0",
                required: true,
                type: {
                    name: "Number"
                }
            },
            y0: {
                serializedName: "y0",
                required: true,
                type: {
                    name: "Number"
                }
            },
            x1: {
                serializedName: "x1",
                required: true,
                type: {
                    name: "Number"
                }
            },
            y1: {
                serializedName: "y1",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ExpectedRemunerationAnnotationParsed = {
    type: {
        name: "Composite",
        className: "ExpectedRemunerationAnnotationParsed",
        modelProperties: {
            minimum: {
                serializedName: "minimum",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            maximum: {
                serializedName: "maximum",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            currency: {
                serializedName: "currency",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const YearsExperienceAnnotationParsed = {
    type: {
        name: "Composite",
        className: "YearsExperienceAnnotationParsed",
        modelProperties: {
            minimum: {
                serializedName: "minimum",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            maximum: {
                serializedName: "maximum",
                nullable: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const JobDescriptionSearchParameters = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchParameters",
        modelProperties: {
            indices: {
                serializedName: "indices",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            resume: {
                serializedName: "resume",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            jobTitles: {
                serializedName: "jobTitles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            jobTitlesRequired: {
                serializedName: "jobTitlesRequired",
                type: {
                    name: "Boolean"
                }
            },
            jobTitlesWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "jobTitlesWeight",
                type: {
                    name: "Number"
                }
            },
            totalYearsExperience: {
                serializedName: "totalYearsExperience",
                type: {
                    name: "Number"
                }
            },
            yearsExperienceRequired: {
                serializedName: "yearsExperienceRequired",
                type: {
                    name: "Boolean"
                }
            },
            yearsExperienceWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "yearsExperienceWeight",
                type: {
                    name: "Number"
                }
            },
            locations: {
                serializedName: "locations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersLocation"
                        }
                    }
                }
            },
            locationsWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "locationsWeight",
                type: {
                    name: "Number"
                }
            },
            locationsRequired: {
                serializedName: "locationsRequired",
                type: {
                    name: "Boolean"
                }
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill"
                        }
                    }
                }
            },
            skillsWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "skillsWeight",
                type: {
                    name: "Number"
                }
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill"
                        }
                    }
                }
            },
            languagesWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "languagesWeight",
                type: {
                    name: "Number"
                }
            },
            degrees: {
                serializedName: "degrees",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            degreesRequired: {
                serializedName: "degreesRequired",
                type: {
                    name: "Boolean"
                }
            },
            degreeTypes: {
                constraints: {
                    UniqueItems: true
                },
                serializedName: "degreeTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "school",
                                "certificate",
                                "bachelors",
                                "masters",
                                "doctoral"
                            ]
                        }
                    }
                }
            },
            degreeTypesRequired: {
                serializedName: "degreeTypesRequired",
                type: {
                    name: "Boolean"
                }
            },
            educationWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "educationWeight",
                type: {
                    name: "Number"
                }
            },
            searchExpression: {
                serializedName: "searchExpression",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            searchExpressionRequired: {
                serializedName: "searchExpressionRequired",
                type: {
                    name: "Boolean"
                }
            },
            searchExpressionWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "searchExpressionWeight",
                type: {
                    name: "Number"
                }
            },
            socCodes: {
                serializedName: "socCodes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            socCodesWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "socCodesWeight",
                type: {
                    name: "Number"
                }
            },
            socCodesRequired: {
                serializedName: "socCodesRequired",
                type: {
                    name: "Boolean"
                }
            },
            managementLevel: {
                serializedName: "managementLevel",
                nullable: true,
                type: {
                    name: "Enum",
                    allowedValues: ["None", "Low", "Mid", "Upper"]
                }
            },
            managementLevelRequired: {
                serializedName: "managementLevelRequired",
                type: {
                    name: "Boolean"
                }
            },
            managementLevelWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0
                },
                serializedName: "managementLevelWeight",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const JobDescriptionSearch = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearch",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            next: {
                serializedName: "next",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            previous: {
                serializedName: "previous",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchParameters"
                }
            },
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobDescriptionSearchResult"
                        }
                    }
                }
            }
        }
    }
};
const JobDescriptionSearchResult = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchResult",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            score: {
                serializedName: "score",
                required: true,
                type: {
                    name: "Number"
                }
            },
            pdf: {
                serializedName: "pdf",
                required: true,
                type: {
                    name: "String"
                }
            },
            jobTitle: {
                serializedName: "jobTitle",
                type: {
                    name: "Composite",
                    className: "JobTitleSearchScoreComponent"
                }
            },
            managementLevel: {
                serializedName: "managementLevel",
                type: {
                    name: "Composite",
                    className: "ManagementLevelSearchScoreComponent"
                }
            },
            experience: {
                serializedName: "experience",
                type: {
                    name: "Composite",
                    className: "ExperienceSearchScoreComponent"
                }
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Composite",
                    className: "SkillsSearchScoreComponent"
                }
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Composite",
                    className: "LanguagesSearchScoreComponent"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "LocationSearchScoreComponent"
                }
            },
            education: {
                serializedName: "education",
                type: {
                    name: "Composite",
                    className: "EducationSearchScoreComponent"
                }
            },
            occupationGroup: {
                serializedName: "occupationGroup",
                type: {
                    name: "Composite",
                    className: "OccupationGroupSearchScoreComponent"
                }
            },
            searchExpression: {
                serializedName: "searchExpression",
                type: {
                    name: "Composite",
                    className: "SearchExpressionSearchScoreComponent"
                }
            }
        }
    }
};
const JobDescriptionSearchDetail = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetail",
        modelProperties: {
            jobTitle: {
                serializedName: "jobTitle",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailJobTitle"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailLocation"
                }
            },
            education: {
                serializedName: "education",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailEducation"
                }
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailSkills"
                }
            },
            experience: {
                serializedName: "experience",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailExperience"
                }
            },
            occupationGroup: {
                serializedName: "occupationGroup",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailOccupationGroup"
                }
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailLanguages"
                }
            },
            managementLevel: {
                serializedName: "managementLevel",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailManagementLevel"
                }
            },
            searchExpression: {
                serializedName: "searchExpression",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailSearchExpression"
                }
            }
        }
    }
};
const JobDescriptionSearchDetailJobTitle = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailJobTitle",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailJobTitleValue"
                }
            }
        }
    }
};
const JobDescriptionSearchDetailJobTitleValue = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailJobTitleValue",
        modelProperties: {
            name: {
                serializedName: "name",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            companyName: {
                serializedName: "companyName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const JobDescriptionSearchDetailLocation = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailLocation",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersLocation"
                        }
                    }
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailLocationValue"
                }
            }
        }
    }
};
const Components1TlnsonSchemasJobdescriptionsearchdetailPropertiesLocationPropertiesValueAllof1 = {
    type: {
        name: "Composite",
        className: "Components1TlnsonSchemasJobdescriptionsearchdetailPropertiesLocationPropertiesValueAllof1",
        modelProperties: {
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const JobDescriptionSearchDetailEducation = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailEducation",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailEducationMissing"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailEducationValue"
                }
            }
        }
    }
};
const JobDescriptionSearchDetailEducationMissing = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailEducationMissing",
        modelProperties: {
            degrees: {
                serializedName: "degrees",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            degreeTypes: {
                serializedName: "degreeTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const JobDescriptionSearchDetailEducationValue = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailEducationValue",
        modelProperties: {
            degrees: {
                serializedName: "degrees",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            degreeTypes: {
                serializedName: "degreeTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const JobDescriptionSearchDetailSkills = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailSkills",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill"
                        }
                    }
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobDescriptionSearchDetailSkillsValueItem"
                        }
                    }
                }
            }
        }
    }
};
const JobDescriptionSearchDetailSkillsValueItem = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailSkillsValueItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const JobDescriptionSearchDetailExperience = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailExperience",
        modelProperties: {
            minimumExperience: {
                serializedName: "minimumExperience",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            maximumExperience: {
                serializedName: "maximumExperience",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const JobDescriptionSearchDetailOccupationGroup = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailOccupationGroup",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobDescriptionSearchDetailOccupationGroupValueItem"
                        }
                    }
                }
            }
        }
    }
};
const Components1Bq3Q31SchemasJobdescriptionsearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1 = {
    type: {
        name: "Composite",
        className: "Components1Bq3Q31SchemasJobdescriptionsearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1",
        modelProperties: {
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const JobDescriptionSearchDetailLanguages = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailLanguages",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill"
                        }
                    }
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobDescriptionSearchDetailLanguagesValueItem"
                        }
                    }
                }
            }
        }
    }
};
const JobDescriptionSearchDetailLanguagesValueItem = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailLanguagesValueItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const JobDescriptionSearchDetailManagementLevel = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailManagementLevel",
        modelProperties: {
            level: {
                serializedName: "level",
                nullable: true,
                type: {
                    name: "Enum",
                    allowedValues: ["None", "Low", "Mid", "Upper"]
                }
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const JobDescriptionSearchDetailSearchExpression = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailSearchExpression",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const JobDescriptionSearchConfig = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchConfig",
        modelProperties: {
            allowPdfDownload: {
                serializedName: "allowPdfDownload",
                type: {
                    name: "Boolean"
                }
            },
            maxResults: {
                serializedName: "maxResults",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            displayJobTitle: {
                serializedName: "displayJobTitle",
                type: {
                    name: "Boolean"
                }
            },
            displayLocation: {
                serializedName: "displayLocation",
                type: {
                    name: "Boolean"
                }
            },
            displayYearsExperience: {
                serializedName: "displayYearsExperience",
                type: {
                    name: "Boolean"
                }
            },
            displayOccupationGroup: {
                serializedName: "displayOccupationGroup",
                type: {
                    name: "Boolean"
                }
            },
            displayEducation: {
                serializedName: "displayEducation",
                type: {
                    name: "Boolean"
                }
            },
            displaySkills: {
                serializedName: "displaySkills",
                type: {
                    name: "Boolean"
                }
            },
            displayLanguages: {
                serializedName: "displayLanguages",
                type: {
                    name: "Boolean"
                }
            },
            displayManagementLevel: {
                serializedName: "displayManagementLevel",
                type: {
                    name: "Boolean"
                }
            },
            displayKeywords: {
                serializedName: "displayKeywords",
                type: {
                    name: "Boolean"
                }
            },
            weightJobTitle: {
                serializedName: "weightJobTitle",
                type: {
                    name: "Number"
                }
            },
            weightLocation: {
                serializedName: "weightLocation",
                type: {
                    name: "Number"
                }
            },
            weightYearsExperience: {
                serializedName: "weightYearsExperience",
                type: {
                    name: "Number"
                }
            },
            weightOccupationGroup: {
                serializedName: "weightOccupationGroup",
                type: {
                    name: "Number"
                }
            },
            weightEducation: {
                serializedName: "weightEducation",
                type: {
                    name: "Number"
                }
            },
            weightSkills: {
                serializedName: "weightSkills",
                type: {
                    name: "Number"
                }
            },
            weightLanguages: {
                serializedName: "weightLanguages",
                type: {
                    name: "Number"
                }
            },
            weightManagementLevel: {
                serializedName: "weightManagementLevel",
                type: {
                    name: "Number"
                }
            },
            weightKeywords: {
                serializedName: "weightKeywords",
                type: {
                    name: "Number"
                }
            },
            indices: {
                serializedName: "indices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            searchToolTheme: {
                serializedName: "searchToolTheme",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            userId: {
                serializedName: "userId",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            username: {
                serializedName: "username",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PathsFqn8P8JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsFqn8P8JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema",
        modelProperties: {
            configOverride: {
                serializedName: "configOverride",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchConfig"
                }
            }
        }
    }
};
const JobDescriptionSearchEmbed = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchEmbed",
        modelProperties: {
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            next: {
                serializedName: "next",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            previous: {
                serializedName: "previous",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Get200ApplicationJsonPropertiesItemsItem"
                        }
                    }
                }
            }
        }
    }
};
const Get200ApplicationJsonPropertiesItemsItem = {
    type: {
        name: "Composite",
        className: "Get200ApplicationJsonPropertiesItemsItem",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            documentType: {
                serializedName: "documentType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            documentType: {
                serializedName: "documentType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            next: {
                serializedName: "next",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            previous: {
                serializedName: "previous",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems"
                        }
                    }
                }
            }
        }
    }
};
const PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems = {
    type: {
        name: "Composite",
        className: "PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems",
        modelProperties: {
            document: {
                serializedName: "document",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PathsGpptmIndexNameDocumentsPostRequestbodyContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsGpptmIndexNameDocumentsPostRequestbodyContentApplicationJsonSchema",
        modelProperties: {
            document: {
                serializedName: "document",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema",
        modelProperties: {
            document: {
                serializedName: "document",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GetAllInvoicesResults = {
    type: {
        name: "Composite",
        className: "GetAllInvoicesResults",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            next: {
                serializedName: "next",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            previous: {
                serializedName: "previous",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Meta"
                        }
                    }
                }
            }
        }
    }
};
const Invoice = {
    type: {
        name: "Composite",
        className: "Invoice",
        modelProperties: {
            clientVerifiedDt: {
                serializedName: "clientVerifiedDt",
                required: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "InvoiceData"
                }
            },
            meta: {
                serializedName: "meta",
                type: {
                    name: "Composite",
                    className: "InvoiceMeta"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            }
        }
    }
};
const InvoiceData = {
    type: {
        name: "Composite",
        className: "InvoiceData",
        modelProperties: {
            tables: {
                serializedName: "tables",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InvoiceDataTablesItem"
                        }
                    }
                }
            },
            invoiceDate: {
                serializedName: "invoiceDate",
                type: {
                    name: "Composite",
                    className: "DateAnnotation"
                }
            },
            invoiceOrderDate: {
                serializedName: "invoiceOrderDate",
                type: {
                    name: "Composite",
                    className: "DateAnnotation"
                }
            },
            paymentDateDue: {
                serializedName: "paymentDateDue",
                type: {
                    name: "Composite",
                    className: "DateAnnotation"
                }
            },
            paymentAmountBase: {
                serializedName: "paymentAmountBase",
                type: {
                    name: "Composite",
                    className: "InvoiceDataPaymentAmountBase"
                }
            },
            paymentAmountTax: {
                serializedName: "paymentAmountTax",
                type: {
                    name: "Composite",
                    className: "InvoiceDataPaymentAmountTax"
                }
            },
            paymentAmountTotal: {
                serializedName: "paymentAmountTotal",
                type: {
                    name: "Composite",
                    className: "InvoiceDataPaymentAmountTotal"
                }
            },
            paymentAmountPaid: {
                serializedName: "paymentAmountPaid",
                type: {
                    name: "Composite",
                    className: "InvoiceDataPaymentAmountPaid"
                }
            },
            paymentAmountDue: {
                serializedName: "paymentAmountDue",
                type: {
                    name: "Composite",
                    className: "InvoiceDataPaymentAmountDue"
                }
            },
            invoiceNumber: {
                serializedName: "invoiceNumber",
                type: {
                    name: "Composite",
                    className: "InvoiceDataInvoiceNumber"
                }
            },
            invoicePurchaseOrderNumber: {
                serializedName: "invoicePurchaseOrderNumber",
                type: {
                    name: "Composite",
                    className: "InvoiceDataInvoicePurchaseOrderNumber"
                }
            },
            supplierBusinessNumber: {
                serializedName: "supplierBusinessNumber",
                type: {
                    name: "Composite",
                    className: "InvoiceDataSupplierBusinessNumber"
                }
            },
            customerNumber: {
                serializedName: "customerNumber",
                type: {
                    name: "Composite",
                    className: "InvoiceDataCustomerNumber"
                }
            },
            customerBusinessNumber: {
                serializedName: "customerBusinessNumber",
                type: {
                    name: "Composite",
                    className: "InvoiceDataCustomerBusinessNumber"
                }
            },
            paymentReference: {
                serializedName: "paymentReference",
                type: {
                    name: "Composite",
                    className: "InvoiceDataPaymentReference"
                }
            },
            bankAccountNumber: {
                serializedName: "bankAccountNumber",
                type: {
                    name: "Composite",
                    className: "InvoiceDataBankAccountNumber"
                }
            },
            supplierVat: {
                serializedName: "supplierVat",
                type: {
                    name: "Composite",
                    className: "InvoiceDataSupplierVat"
                }
            },
            customerVat: {
                serializedName: "customerVat",
                type: {
                    name: "Composite",
                    className: "InvoiceDataCustomerVat"
                }
            },
            bpayBillerCode: {
                serializedName: "bpayBillerCode",
                type: {
                    name: "Composite",
                    className: "InvoiceDataBpayBillerCode"
                }
            },
            bpayReference: {
                serializedName: "bpayReference",
                type: {
                    name: "Composite",
                    className: "InvoiceDataBpayReference"
                }
            },
            bankSortCode: {
                serializedName: "bankSortCode",
                type: {
                    name: "Composite",
                    className: "InvoiceDataBankSortCode"
                }
            },
            bankIban: {
                serializedName: "bankIban",
                type: {
                    name: "Composite",
                    className: "InvoiceDataBankIban"
                }
            },
            bankSwift: {
                serializedName: "bankSwift",
                type: {
                    name: "Composite",
                    className: "InvoiceDataBankSwift"
                }
            },
            bankBsb: {
                serializedName: "bankBsb",
                type: {
                    name: "Composite",
                    className: "InvoiceDataBankBsb"
                }
            },
            customerContactName: {
                serializedName: "customerContactName",
                type: {
                    name: "Composite",
                    className: "InvoiceDataCustomerContactName"
                }
            },
            customerCompanyName: {
                serializedName: "customerCompanyName",
                type: {
                    name: "Composite",
                    className: "InvoiceDataCustomerCompanyName"
                }
            },
            supplierCompanyName: {
                serializedName: "supplierCompanyName",
                type: {
                    name: "Composite",
                    className: "InvoiceDataSupplierCompanyName"
                }
            },
            customerBillingAddress: {
                serializedName: "customerBillingAddress",
                type: {
                    name: "Composite",
                    className: "LocationAnnotation"
                }
            },
            customerDeliveryAddress: {
                serializedName: "customerDeliveryAddress",
                type: {
                    name: "Composite",
                    className: "LocationAnnotation"
                }
            },
            supplierAddress: {
                serializedName: "supplierAddress",
                type: {
                    name: "Composite",
                    className: "LocationAnnotation"
                }
            },
            customerPhoneNumber: {
                serializedName: "customerPhoneNumber",
                type: {
                    name: "Composite",
                    className: "InvoiceDataCustomerPhoneNumber"
                }
            },
            supplierPhoneNumber: {
                serializedName: "supplierPhoneNumber",
                type: {
                    name: "Composite",
                    className: "InvoiceDataSupplierPhoneNumber"
                }
            },
            supplierFax: {
                serializedName: "supplierFax",
                type: {
                    name: "Composite",
                    className: "InvoiceDataSupplierFax"
                }
            },
            customerEmail: {
                serializedName: "customerEmail",
                type: {
                    name: "Composite",
                    className: "InvoiceDataCustomerEmail"
                }
            },
            supplierEmail: {
                serializedName: "supplierEmail",
                type: {
                    name: "Composite",
                    className: "InvoiceDataSupplierEmail"
                }
            },
            supplierWebsite: {
                serializedName: "supplierWebsite",
                type: {
                    name: "Composite",
                    className: "InvoiceDataSupplierWebsite"
                }
            },
            currencyCode: {
                serializedName: "currencyCode",
                type: {
                    name: "Composite",
                    className: "EnumAnnotationSerializer"
                }
            },
            customFields: {
                serializedName: "customFields",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const InvoiceDataTablesItem = {
    type: {
        name: "Composite",
        className: "InvoiceDataTablesItem",
        modelProperties: {
            rows: {
                serializedName: "rows",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RowAnnotation"
                        }
                    }
                }
            }
        }
    }
};
const RowAnnotation = {
    type: {
        name: "Composite",
        className: "RowAnnotation",
        modelProperties: {
            code: {
                serializedName: "code",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            unitPrice: {
                serializedName: "unitPrice",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            quantity: {
                serializedName: "quantity",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            discount: {
                serializedName: "discount",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            baseTotal: {
                serializedName: "baseTotal",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            taxRate: {
                serializedName: "taxRate",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            taxTotal: {
                serializedName: "taxTotal",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            total: {
                serializedName: "total",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            other: {
                serializedName: "other",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            customFields: {
                serializedName: "customFields",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const Components1W3SqeuSchemasInvoicedataPropertiesPaymentamountbaseAllof1 = {
    type: {
        name: "Composite",
        className: "Components1W3SqeuSchemasInvoicedataPropertiesPaymentamountbaseAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components6Zm20BSchemasInvoicedataPropertiesPaymentamounttaxAllof1 = {
    type: {
        name: "Composite",
        className: "Components6Zm20BSchemasInvoicedataPropertiesPaymentamounttaxAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components4A2PzvSchemasInvoicedataPropertiesPaymentamounttotalAllof1 = {
    type: {
        name: "Composite",
        className: "Components4A2PzvSchemasInvoicedataPropertiesPaymentamounttotalAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components1Vvtu5NSchemasInvoicedataPropertiesPaymentamountpaidAllof1 = {
    type: {
        name: "Composite",
        className: "Components1Vvtu5NSchemasInvoicedataPropertiesPaymentamountpaidAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentsEtsq6MSchemasInvoicedataPropertiesPaymentamountdueAllof1 = {
    type: {
        name: "Composite",
        className: "ComponentsEtsq6MSchemasInvoicedataPropertiesPaymentamountdueAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components5Rnu7ESchemasInvoicedataPropertiesInvoicenumberAllof1 = {
    type: {
        name: "Composite",
        className: "Components5Rnu7ESchemasInvoicedataPropertiesInvoicenumberAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentsAq75Z8SchemasInvoicedataPropertiesInvoicepurchaseordernumberAllof1 = {
    type: {
        name: "Composite",
        className: "ComponentsAq75Z8SchemasInvoicedataPropertiesInvoicepurchaseordernumberAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components5D6NjySchemasInvoicedataPropertiesSupplierbusinessnumberAllof1 = {
    type: {
        name: "Composite",
        className: "Components5D6NjySchemasInvoicedataPropertiesSupplierbusinessnumberAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components105Abr3SchemasInvoicedataPropertiesCustomernumberAllof1 = {
    type: {
        name: "Composite",
        className: "Components105Abr3SchemasInvoicedataPropertiesCustomernumberAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components158Lya5SchemasInvoicedataPropertiesCustomerbusinessnumberAllof1 = {
    type: {
        name: "Composite",
        className: "Components158Lya5SchemasInvoicedataPropertiesCustomerbusinessnumberAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components2XnshtSchemasInvoicedataPropertiesPaymentreferenceAllof1 = {
    type: {
        name: "Composite",
        className: "Components2XnshtSchemasInvoicedataPropertiesPaymentreferenceAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components74A7C1SchemasInvoicedataPropertiesBankaccountnumberAllof1 = {
    type: {
        name: "Composite",
        className: "Components74A7C1SchemasInvoicedataPropertiesBankaccountnumberAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentsB3U7OaSchemasInvoicedataPropertiesSuppliervatAllof1 = {
    type: {
        name: "Composite",
        className: "ComponentsB3U7OaSchemasInvoicedataPropertiesSuppliervatAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentsBeazccSchemasInvoicedataPropertiesCustomervatAllof1 = {
    type: {
        name: "Composite",
        className: "ComponentsBeazccSchemasInvoicedataPropertiesCustomervatAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentsA69Bd0SchemasInvoicedataPropertiesBpaybillercodeAllof1 = {
    type: {
        name: "Composite",
        className: "ComponentsA69Bd0SchemasInvoicedataPropertiesBpaybillercodeAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentsW32SuaSchemasInvoicedataPropertiesBpayreferenceAllof1 = {
    type: {
        name: "Composite",
        className: "ComponentsW32SuaSchemasInvoicedataPropertiesBpayreferenceAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components1QdassaSchemasInvoicedataPropertiesBanksortcodeAllof1 = {
    type: {
        name: "Composite",
        className: "Components1QdassaSchemasInvoicedataPropertiesBanksortcodeAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components1127QwqSchemasInvoicedataPropertiesBankibanAllof1 = {
    type: {
        name: "Composite",
        className: "Components1127QwqSchemasInvoicedataPropertiesBankibanAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components1Roa72HSchemasInvoicedataPropertiesBankswiftAllof1 = {
    type: {
        name: "Composite",
        className: "Components1Roa72HSchemasInvoicedataPropertiesBankswiftAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components1RrxgkvSchemasInvoicedataPropertiesBankbsbAllof1 = {
    type: {
        name: "Composite",
        className: "Components1RrxgkvSchemasInvoicedataPropertiesBankbsbAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentsWv2QrxSchemasInvoicedataPropertiesCustomercontactnameAllof1 = {
    type: {
        name: "Composite",
        className: "ComponentsWv2QrxSchemasInvoicedataPropertiesCustomercontactnameAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components1O8OpknSchemasInvoicedataPropertiesCustomercompanynameAllof1 = {
    type: {
        name: "Composite",
        className: "Components1O8OpknSchemasInvoicedataPropertiesCustomercompanynameAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components1P4Fl61SchemasInvoicedataPropertiesSuppliercompanynameAllof1 = {
    type: {
        name: "Composite",
        className: "Components1P4Fl61SchemasInvoicedataPropertiesSuppliercompanynameAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components1YsiqwnSchemasInvoicedataPropertiesCustomerphonenumberAllof1 = {
    type: {
        name: "Composite",
        className: "Components1YsiqwnSchemasInvoicedataPropertiesCustomerphonenumberAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components1Hr2XldSchemasInvoicedataPropertiesSupplierphonenumberAllof1 = {
    type: {
        name: "Composite",
        className: "Components1Hr2XldSchemasInvoicedataPropertiesSupplierphonenumberAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components1Fe3VqtSchemasInvoicedataPropertiesSupplierfaxAllof1 = {
    type: {
        name: "Composite",
        className: "Components1Fe3VqtSchemasInvoicedataPropertiesSupplierfaxAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components1Y7HcurSchemasInvoicedataPropertiesCustomeremailAllof1 = {
    type: {
        name: "Composite",
        className: "Components1Y7HcurSchemasInvoicedataPropertiesCustomeremailAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components10Thcs2SchemasInvoicedataPropertiesSupplieremailAllof1 = {
    type: {
        name: "Composite",
        className: "Components10Thcs2SchemasInvoicedataPropertiesSupplieremailAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components17JmwpjSchemasInvoicedataPropertiesSupplierwebsiteAllof1 = {
    type: {
        name: "Composite",
        className: "Components17JmwpjSchemasInvoicedataPropertiesSupplierwebsiteAllof1",
        modelProperties: {
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Components17Ashz6SchemasInvoicePropertiesMetaAllof1 = {
    type: {
        name: "Composite",
        className: "Components17Ashz6SchemasInvoicePropertiesMetaAllof1",
        modelProperties: {
            clientVerifiedDt: {
                serializedName: "clientVerifiedDt",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            },
            reviewUrl: {
                serializedName: "reviewUrl",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            next: {
                serializedName: "next",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            previous: {
                serializedName: "previous",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "User"
                        }
                    }
                }
            }
        }
    }
};
const User = {
    type: {
        name: "Composite",
        className: "User",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            username: {
                serializedName: "username",
                required: true,
                type: {
                    name: "String"
                }
            },
            email: {
                serializedName: "email",
                type: {
                    name: "String"
                }
            },
            apiKey: {
                serializedName: "apiKey",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Paths1Y6A2MfUsersPostResponses201ContentApplicationJsonSchemaAllof1 = {
    type: {
        name: "Composite",
        className: "Paths1Y6A2MfUsersPostResponses201ContentApplicationJsonSchemaAllof1",
        modelProperties: {
            apiKey: {
                serializedName: "apiKey",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResumeRequestBody = {
    type: {
        name: "Composite",
        className: "ResumeRequestBody",
        modelProperties: {
            file: {
                serializedName: "file",
                type: {
                    name: "Stream"
                }
            },
            url: {
                serializedName: "url",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "ResumeData"
                }
            },
            identifier: {
                serializedName: "identifier",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            fileName: {
                serializedName: "fileName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            wait: {
                defaultValue: "true",
                serializedName: "wait",
                type: {
                    name: "String"
                }
            },
            language: {
                serializedName: "language",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            expiryTime: {
                serializedName: "expiryTime",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RedactedResumeRequestBody = {
    type: {
        name: "Composite",
        className: "RedactedResumeRequestBody",
        modelProperties: {
            file: {
                serializedName: "file",
                type: {
                    name: "Stream"
                }
            },
            identifier: {
                serializedName: "identifier",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            fileName: {
                serializedName: "fileName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            language: {
                serializedName: "language",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            wait: {
                defaultValue: "true",
                serializedName: "wait",
                type: {
                    name: "String"
                }
            },
            redactHeadshot: {
                defaultValue: "true",
                serializedName: "redactHeadshot",
                type: {
                    name: "String"
                }
            },
            redactPersonalDetails: {
                defaultValue: "true",
                serializedName: "redactPersonalDetails",
                type: {
                    name: "String"
                }
            },
            redactWorkDetails: {
                defaultValue: "true",
                serializedName: "redactWorkDetails",
                type: {
                    name: "String"
                }
            },
            redactEducationDetails: {
                defaultValue: "true",
                serializedName: "redactEducationDetails",
                type: {
                    name: "String"
                }
            },
            redactReferees: {
                defaultValue: "true",
                serializedName: "redactReferees",
                type: {
                    name: "String"
                }
            },
            redactLocations: {
                defaultValue: "true",
                serializedName: "redactLocations",
                type: {
                    name: "String"
                }
            },
            redactDates: {
                defaultValue: "true",
                serializedName: "redactDates",
                type: {
                    name: "String"
                }
            },
            redactGender: {
                defaultValue: "true",
                serializedName: "redactGender",
                type: {
                    name: "String"
                }
            },
            expiryTime: {
                serializedName: "expiryTime",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JobDescriptionRequestBody = {
    type: {
        name: "Composite",
        className: "JobDescriptionRequestBody",
        modelProperties: {
            file: {
                serializedName: "file",
                type: {
                    name: "Stream"
                }
            },
            url: {
                serializedName: "url",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            identifier: {
                serializedName: "identifier",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            fileName: {
                serializedName: "fileName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            wait: {
                defaultValue: "true",
                serializedName: "wait",
                type: {
                    name: "String"
                }
            },
            language: {
                serializedName: "language",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            expiryTime: {
                serializedName: "expiryTime",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IndexRequestBody = {
    type: {
        name: "Composite",
        className: "IndexRequestBody",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            documentType: {
                serializedName: "documentType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InvoiceRequestBody = {
    type: {
        name: "Composite",
        className: "InvoiceRequestBody",
        modelProperties: {
            file: {
                serializedName: "file",
                type: {
                    name: "Stream"
                }
            },
            url: {
                serializedName: "url",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            identifier: {
                serializedName: "identifier",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            fileName: {
                serializedName: "fileName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            wait: {
                defaultValue: "true",
                serializedName: "wait",
                type: {
                    name: "String"
                }
            },
            language: {
                serializedName: "language",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            expiryTime: {
                serializedName: "expiryTime",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InvoiceMeta = {
    type: {
        name: "Composite",
        className: "InvoiceMeta",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Meta.type.modelProperties), Components17Ashz6SchemasInvoicePropertiesMetaAllof1.type
            .modelProperties)
    }
};
const ResumeSearchDetailLocationValue = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailLocationValue",
        modelProperties: Object.assign(Object.assign({}, Location.type.modelProperties), ComponentsN9ShogSchemasResumesearchdetailPropertiesLocationPropertiesValueAllof1
            .type.modelProperties)
    }
};
const JobDescriptionSearchDetailLocationValue = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailLocationValue",
        modelProperties: Object.assign(Object.assign({}, Location.type.modelProperties), Components1TlnsonSchemasJobdescriptionsearchdetailPropertiesLocationPropertiesValueAllof1
            .type.modelProperties)
    }
};
const ResumeSearchDetailEducationValueItem = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailEducationValueItem",
        modelProperties: Object.assign(Object.assign({}, Education.type.modelProperties), ComponentsSxu0N3SchemasResumesearchdetailPropertiesEducationPropertiesValueItemsAllof1
            .type.modelProperties)
    }
};
const ResumeSearchDetailSkillsValueItem = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailSkillsValueItem",
        modelProperties: Object.assign(Object.assign({}, ResumeSkill.type.modelProperties), ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1
            .type.modelProperties)
    }
};
const ResumeSearchDetailLanguagesValueItem = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailLanguagesValueItem",
        modelProperties: Object.assign(Object.assign({}, ResumeSkill.type.modelProperties), Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1
            .type.modelProperties)
    }
};
const ResumeSearchDetailOccupationGroupValueItem = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailOccupationGroupValueItem",
        modelProperties: Object.assign(Object.assign({}, OccupationGroup.type.modelProperties), ComponentsK7P1F5SchemasResumesearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1
            .type.modelProperties)
    }
};
const JobDescriptionSearchDetailOccupationGroupValueItem = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailOccupationGroupValueItem",
        modelProperties: Object.assign(Object.assign({}, OccupationGroup.type.modelProperties), Components1Bq3Q31SchemasJobdescriptionsearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1
            .type.modelProperties)
    }
};
const JobTitleAnnotation = {
    type: {
        name: "Composite",
        className: "JobTitleAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "JobTitleAnnotationParsed"
                }
            } })
    }
};
const TextAnnotation = {
    type: {
        name: "Composite",
        className: "TextAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DateAnnotation = {
    type: {
        name: "Composite",
        className: "DateAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "Date"
                }
            } })
    }
};
const LanguageAnnotation = {
    type: {
        name: "Composite",
        className: "LanguageAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const SkillAnnotation = {
    type: {
        name: "Composite",
        className: "SkillAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ExpectedRemunerationAnnotation = {
    type: {
        name: "Composite",
        className: "ExpectedRemunerationAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "ExpectedRemunerationAnnotationParsed"
                }
            } })
    }
};
const LocationAnnotation = {
    type: {
        name: "Composite",
        className: "LocationAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "Location"
                }
            } })
    }
};
const YearsExperienceAnnotation = {
    type: {
        name: "Composite",
        className: "YearsExperienceAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "YearsExperienceAnnotationParsed"
                }
            } })
    }
};
const EnumAnnotationSerializer = {
    type: {
        name: "Composite",
        className: "EnumAnnotationSerializer",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "String"
                }
            } })
    }
};
const InvoiceDataPaymentAmountBase = {
    type: {
        name: "Composite",
        className: "InvoiceDataPaymentAmountBase",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components1W3SqeuSchemasInvoicedataPropertiesPaymentamountbaseAllof1
            .type.modelProperties)
    }
};
const InvoiceDataPaymentAmountTax = {
    type: {
        name: "Composite",
        className: "InvoiceDataPaymentAmountTax",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components6Zm20BSchemasInvoicedataPropertiesPaymentamounttaxAllof1.type
            .modelProperties)
    }
};
const InvoiceDataPaymentAmountTotal = {
    type: {
        name: "Composite",
        className: "InvoiceDataPaymentAmountTotal",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components4A2PzvSchemasInvoicedataPropertiesPaymentamounttotalAllof1
            .type.modelProperties)
    }
};
const InvoiceDataPaymentAmountPaid = {
    type: {
        name: "Composite",
        className: "InvoiceDataPaymentAmountPaid",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components1Vvtu5NSchemasInvoicedataPropertiesPaymentamountpaidAllof1
            .type.modelProperties)
    }
};
const InvoiceDataPaymentAmountDue = {
    type: {
        name: "Composite",
        className: "InvoiceDataPaymentAmountDue",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), ComponentsEtsq6MSchemasInvoicedataPropertiesPaymentamountdueAllof1.type
            .modelProperties)
    }
};
const InvoiceDataInvoiceNumber = {
    type: {
        name: "Composite",
        className: "InvoiceDataInvoiceNumber",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components5Rnu7ESchemasInvoicedataPropertiesInvoicenumberAllof1.type
            .modelProperties)
    }
};
const InvoiceDataInvoicePurchaseOrderNumber = {
    type: {
        name: "Composite",
        className: "InvoiceDataInvoicePurchaseOrderNumber",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), ComponentsAq75Z8SchemasInvoicedataPropertiesInvoicepurchaseordernumberAllof1
            .type.modelProperties)
    }
};
const InvoiceDataSupplierBusinessNumber = {
    type: {
        name: "Composite",
        className: "InvoiceDataSupplierBusinessNumber",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components5D6NjySchemasInvoicedataPropertiesSupplierbusinessnumberAllof1
            .type.modelProperties)
    }
};
const InvoiceDataCustomerNumber = {
    type: {
        name: "Composite",
        className: "InvoiceDataCustomerNumber",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components105Abr3SchemasInvoicedataPropertiesCustomernumberAllof1.type
            .modelProperties)
    }
};
const InvoiceDataCustomerBusinessNumber = {
    type: {
        name: "Composite",
        className: "InvoiceDataCustomerBusinessNumber",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components158Lya5SchemasInvoicedataPropertiesCustomerbusinessnumberAllof1
            .type.modelProperties)
    }
};
const InvoiceDataPaymentReference = {
    type: {
        name: "Composite",
        className: "InvoiceDataPaymentReference",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components2XnshtSchemasInvoicedataPropertiesPaymentreferenceAllof1.type
            .modelProperties)
    }
};
const InvoiceDataBankAccountNumber = {
    type: {
        name: "Composite",
        className: "InvoiceDataBankAccountNumber",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components74A7C1SchemasInvoicedataPropertiesBankaccountnumberAllof1
            .type.modelProperties)
    }
};
const InvoiceDataSupplierVat = {
    type: {
        name: "Composite",
        className: "InvoiceDataSupplierVat",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), ComponentsB3U7OaSchemasInvoicedataPropertiesSuppliervatAllof1.type
            .modelProperties)
    }
};
const InvoiceDataCustomerVat = {
    type: {
        name: "Composite",
        className: "InvoiceDataCustomerVat",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), ComponentsBeazccSchemasInvoicedataPropertiesCustomervatAllof1.type
            .modelProperties)
    }
};
const InvoiceDataBpayBillerCode = {
    type: {
        name: "Composite",
        className: "InvoiceDataBpayBillerCode",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), ComponentsA69Bd0SchemasInvoicedataPropertiesBpaybillercodeAllof1.type
            .modelProperties)
    }
};
const InvoiceDataBpayReference = {
    type: {
        name: "Composite",
        className: "InvoiceDataBpayReference",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), ComponentsW32SuaSchemasInvoicedataPropertiesBpayreferenceAllof1.type
            .modelProperties)
    }
};
const InvoiceDataBankSortCode = {
    type: {
        name: "Composite",
        className: "InvoiceDataBankSortCode",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components1QdassaSchemasInvoicedataPropertiesBanksortcodeAllof1.type
            .modelProperties)
    }
};
const InvoiceDataBankIban = {
    type: {
        name: "Composite",
        className: "InvoiceDataBankIban",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components1127QwqSchemasInvoicedataPropertiesBankibanAllof1.type
            .modelProperties)
    }
};
const InvoiceDataBankSwift = {
    type: {
        name: "Composite",
        className: "InvoiceDataBankSwift",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components1Roa72HSchemasInvoicedataPropertiesBankswiftAllof1.type
            .modelProperties)
    }
};
const InvoiceDataBankBsb = {
    type: {
        name: "Composite",
        className: "InvoiceDataBankBsb",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components1RrxgkvSchemasInvoicedataPropertiesBankbsbAllof1.type
            .modelProperties)
    }
};
const InvoiceDataCustomerContactName = {
    type: {
        name: "Composite",
        className: "InvoiceDataCustomerContactName",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), ComponentsWv2QrxSchemasInvoicedataPropertiesCustomercontactnameAllof1
            .type.modelProperties)
    }
};
const InvoiceDataCustomerCompanyName = {
    type: {
        name: "Composite",
        className: "InvoiceDataCustomerCompanyName",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components1O8OpknSchemasInvoicedataPropertiesCustomercompanynameAllof1
            .type.modelProperties)
    }
};
const InvoiceDataSupplierCompanyName = {
    type: {
        name: "Composite",
        className: "InvoiceDataSupplierCompanyName",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components1P4Fl61SchemasInvoicedataPropertiesSuppliercompanynameAllof1
            .type.modelProperties)
    }
};
const InvoiceDataCustomerPhoneNumber = {
    type: {
        name: "Composite",
        className: "InvoiceDataCustomerPhoneNumber",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components1YsiqwnSchemasInvoicedataPropertiesCustomerphonenumberAllof1
            .type.modelProperties)
    }
};
const InvoiceDataSupplierPhoneNumber = {
    type: {
        name: "Composite",
        className: "InvoiceDataSupplierPhoneNumber",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components1Hr2XldSchemasInvoicedataPropertiesSupplierphonenumberAllof1
            .type.modelProperties)
    }
};
const InvoiceDataSupplierFax = {
    type: {
        name: "Composite",
        className: "InvoiceDataSupplierFax",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components1Fe3VqtSchemasInvoicedataPropertiesSupplierfaxAllof1.type
            .modelProperties)
    }
};
const InvoiceDataCustomerEmail = {
    type: {
        name: "Composite",
        className: "InvoiceDataCustomerEmail",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components1Y7HcurSchemasInvoicedataPropertiesCustomeremailAllof1.type
            .modelProperties)
    }
};
const InvoiceDataSupplierEmail = {
    type: {
        name: "Composite",
        className: "InvoiceDataSupplierEmail",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components10Thcs2SchemasInvoicedataPropertiesSupplieremailAllof1.type
            .modelProperties)
    }
};
const InvoiceDataSupplierWebsite = {
    type: {
        name: "Composite",
        className: "InvoiceDataSupplierWebsite",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, TextAnnotation.type.modelProperties), Components17JmwpjSchemasInvoicedataPropertiesSupplierwebsiteAllof1.type
            .modelProperties)
    }
};
const PathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema",
        modelProperties: Object.assign(Object.assign({}, User.type.modelProperties), Paths1Y6A2MfUsersPostResponses201ContentApplicationJsonSchemaAllof1
            .type.modelProperties)
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    GetAllDocumentsResults: GetAllDocumentsResults,
    Meta: Meta,
    SplitRelation: SplitRelation,
    PageMeta: PageMeta,
    RequestError: RequestError,
    RequestErrorErrorsItem: RequestErrorErrorsItem,
    ResumeData: ResumeData,
    ResumeDataName: ResumeDataName,
    Location: Location,
    ResumeDataEducationItem: ResumeDataEducationItem,
    ResumeDataEducationItemAccreditation: ResumeDataEducationItemAccreditation,
    ResumeDataEducationItemGrade: ResumeDataEducationItemGrade,
    ResumeDataEducationItemDates: ResumeDataEducationItemDates,
    ResumeDataWorkExperienceItem: ResumeDataWorkExperienceItem,
    ResumeDataWorkExperienceItemDates: ResumeDataWorkExperienceItemDates,
    ResumeDataWorkExperienceItemOccupation: ResumeDataWorkExperienceItemOccupation,
    Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification: Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification,
    ResumeDataSkillsItem: ResumeDataSkillsItem,
    ResumeDataSkillsPropertiesItemsItem: ResumeDataSkillsPropertiesItemsItem,
    ResumeDataRefereesItem: ResumeDataRefereesItem,
    ResumeDataSectionsItem: ResumeDataSectionsItem,
    Resume: Resume,
    ErrorModel: ErrorModel,
    RedactedResume: RedactedResume,
    RedactedResumeData: RedactedResumeData,
    ResumeSearchParameters: ResumeSearchParameters,
    ResumeSearchParametersLocation: ResumeSearchParametersLocation,
    ResumeSearchParametersLocationCoordinates: ResumeSearchParametersLocationCoordinates,
    ResumeSearchParametersSkill: ResumeSearchParametersSkill,
    ResumeSearch: ResumeSearch,
    ResumeSearchResult: ResumeSearchResult,
    JobTitleSearchScoreComponent: JobTitleSearchScoreComponent,
    ManagementLevelSearchScoreComponent: ManagementLevelSearchScoreComponent,
    ExperienceSearchScoreComponent: ExperienceSearchScoreComponent,
    SkillsSearchScoreComponent: SkillsSearchScoreComponent,
    LanguagesSearchScoreComponent: LanguagesSearchScoreComponent,
    LocationSearchScoreComponent: LocationSearchScoreComponent,
    EducationSearchScoreComponent: EducationSearchScoreComponent,
    OccupationGroupSearchScoreComponent: OccupationGroupSearchScoreComponent,
    SearchExpressionSearchScoreComponent: SearchExpressionSearchScoreComponent,
    ResumeSearchDetail: ResumeSearchDetail,
    ResumeSearchDetailJobTitle: ResumeSearchDetailJobTitle,
    ResumeSearchDetailJobTitleValueItem: ResumeSearchDetailJobTitleValueItem,
    ResumeSearchDetailLocation: ResumeSearchDetailLocation,
    ComponentsN9ShogSchemasResumesearchdetailPropertiesLocationPropertiesValueAllof1: ComponentsN9ShogSchemasResumesearchdetailPropertiesLocationPropertiesValueAllof1,
    ResumeSearchDetailEducation: ResumeSearchDetailEducation,
    ResumeSearchDetailEducationMissing: ResumeSearchDetailEducationMissing,
    Education: Education,
    Accreditation: Accreditation,
    EducationGrade: EducationGrade,
    EducationDates: EducationDates,
    ComponentsSxu0N3SchemasResumesearchdetailPropertiesEducationPropertiesValueItemsAllof1: ComponentsSxu0N3SchemasResumesearchdetailPropertiesEducationPropertiesValueItemsAllof1,
    ResumeSearchDetailSkills: ResumeSearchDetailSkills,
    ResumeSkill: ResumeSkill,
    ResumeSkillSourcesItem: ResumeSkillSourcesItem,
    ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1: ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1,
    ResumeSearchDetailExperience: ResumeSearchDetailExperience,
    ResumeSearchDetailOccupationGroup: ResumeSearchDetailOccupationGroup,
    OccupationGroup: OccupationGroup,
    ComponentsK7P1F5SchemasResumesearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1: ComponentsK7P1F5SchemasResumesearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1,
    ResumeSearchDetailLanguages: ResumeSearchDetailLanguages,
    Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1: Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1,
    ResumeSearchDetailManagementLevel: ResumeSearchDetailManagementLevel,
    ResumeSearchDetailSearchExpression: ResumeSearchDetailSearchExpression,
    ResumeSearchMatch: ResumeSearchMatch,
    ResumeSearchMatchDetails: ResumeSearchMatchDetails,
    ResumeSearchConfig: ResumeSearchConfig,
    Paths2T1Oc0ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema: Paths2T1Oc0ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema,
    ResumeSearchEmbed: ResumeSearchEmbed,
    GetAllJobDescriptionsResults: GetAllJobDescriptionsResults,
    JobDescription: JobDescription,
    JobDescriptionData: JobDescriptionData,
    JobTitleAnnotationParsed: JobTitleAnnotationParsed,
    JobTitleAnnotationParsedClassification: JobTitleAnnotationParsedClassification,
    Annotation: Annotation,
    Rectangle: Rectangle,
    ExpectedRemunerationAnnotationParsed: ExpectedRemunerationAnnotationParsed,
    YearsExperienceAnnotationParsed: YearsExperienceAnnotationParsed,
    JobDescriptionSearchParameters: JobDescriptionSearchParameters,
    JobDescriptionSearch: JobDescriptionSearch,
    JobDescriptionSearchResult: JobDescriptionSearchResult,
    JobDescriptionSearchDetail: JobDescriptionSearchDetail,
    JobDescriptionSearchDetailJobTitle: JobDescriptionSearchDetailJobTitle,
    JobDescriptionSearchDetailJobTitleValue: JobDescriptionSearchDetailJobTitleValue,
    JobDescriptionSearchDetailLocation: JobDescriptionSearchDetailLocation,
    Components1TlnsonSchemasJobdescriptionsearchdetailPropertiesLocationPropertiesValueAllof1: Components1TlnsonSchemasJobdescriptionsearchdetailPropertiesLocationPropertiesValueAllof1,
    JobDescriptionSearchDetailEducation: JobDescriptionSearchDetailEducation,
    JobDescriptionSearchDetailEducationMissing: JobDescriptionSearchDetailEducationMissing,
    JobDescriptionSearchDetailEducationValue: JobDescriptionSearchDetailEducationValue,
    JobDescriptionSearchDetailSkills: JobDescriptionSearchDetailSkills,
    JobDescriptionSearchDetailSkillsValueItem: JobDescriptionSearchDetailSkillsValueItem,
    JobDescriptionSearchDetailExperience: JobDescriptionSearchDetailExperience,
    JobDescriptionSearchDetailOccupationGroup: JobDescriptionSearchDetailOccupationGroup,
    Components1Bq3Q31SchemasJobdescriptionsearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1: Components1Bq3Q31SchemasJobdescriptionsearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1,
    JobDescriptionSearchDetailLanguages: JobDescriptionSearchDetailLanguages,
    JobDescriptionSearchDetailLanguagesValueItem: JobDescriptionSearchDetailLanguagesValueItem,
    JobDescriptionSearchDetailManagementLevel: JobDescriptionSearchDetailManagementLevel,
    JobDescriptionSearchDetailSearchExpression: JobDescriptionSearchDetailSearchExpression,
    JobDescriptionSearchConfig: JobDescriptionSearchConfig,
    PathsFqn8P8JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema: PathsFqn8P8JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema,
    JobDescriptionSearchEmbed: JobDescriptionSearchEmbed,
    Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema: Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema,
    Get200ApplicationJsonPropertiesItemsItem: Get200ApplicationJsonPropertiesItemsItem,
    Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema: Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema,
    PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema: PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema,
    PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems: PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems,
    PathsGpptmIndexNameDocumentsPostRequestbodyContentApplicationJsonSchema: PathsGpptmIndexNameDocumentsPostRequestbodyContentApplicationJsonSchema,
    PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema: PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema,
    GetAllInvoicesResults: GetAllInvoicesResults,
    Invoice: Invoice,
    InvoiceData: InvoiceData,
    InvoiceDataTablesItem: InvoiceDataTablesItem,
    RowAnnotation: RowAnnotation,
    Components1W3SqeuSchemasInvoicedataPropertiesPaymentamountbaseAllof1: Components1W3SqeuSchemasInvoicedataPropertiesPaymentamountbaseAllof1,
    Components6Zm20BSchemasInvoicedataPropertiesPaymentamounttaxAllof1: Components6Zm20BSchemasInvoicedataPropertiesPaymentamounttaxAllof1,
    Components4A2PzvSchemasInvoicedataPropertiesPaymentamounttotalAllof1: Components4A2PzvSchemasInvoicedataPropertiesPaymentamounttotalAllof1,
    Components1Vvtu5NSchemasInvoicedataPropertiesPaymentamountpaidAllof1: Components1Vvtu5NSchemasInvoicedataPropertiesPaymentamountpaidAllof1,
    ComponentsEtsq6MSchemasInvoicedataPropertiesPaymentamountdueAllof1: ComponentsEtsq6MSchemasInvoicedataPropertiesPaymentamountdueAllof1,
    Components5Rnu7ESchemasInvoicedataPropertiesInvoicenumberAllof1: Components5Rnu7ESchemasInvoicedataPropertiesInvoicenumberAllof1,
    ComponentsAq75Z8SchemasInvoicedataPropertiesInvoicepurchaseordernumberAllof1: ComponentsAq75Z8SchemasInvoicedataPropertiesInvoicepurchaseordernumberAllof1,
    Components5D6NjySchemasInvoicedataPropertiesSupplierbusinessnumberAllof1: Components5D6NjySchemasInvoicedataPropertiesSupplierbusinessnumberAllof1,
    Components105Abr3SchemasInvoicedataPropertiesCustomernumberAllof1: Components105Abr3SchemasInvoicedataPropertiesCustomernumberAllof1,
    Components158Lya5SchemasInvoicedataPropertiesCustomerbusinessnumberAllof1: Components158Lya5SchemasInvoicedataPropertiesCustomerbusinessnumberAllof1,
    Components2XnshtSchemasInvoicedataPropertiesPaymentreferenceAllof1: Components2XnshtSchemasInvoicedataPropertiesPaymentreferenceAllof1,
    Components74A7C1SchemasInvoicedataPropertiesBankaccountnumberAllof1: Components74A7C1SchemasInvoicedataPropertiesBankaccountnumberAllof1,
    ComponentsB3U7OaSchemasInvoicedataPropertiesSuppliervatAllof1: ComponentsB3U7OaSchemasInvoicedataPropertiesSuppliervatAllof1,
    ComponentsBeazccSchemasInvoicedataPropertiesCustomervatAllof1: ComponentsBeazccSchemasInvoicedataPropertiesCustomervatAllof1,
    ComponentsA69Bd0SchemasInvoicedataPropertiesBpaybillercodeAllof1: ComponentsA69Bd0SchemasInvoicedataPropertiesBpaybillercodeAllof1,
    ComponentsW32SuaSchemasInvoicedataPropertiesBpayreferenceAllof1: ComponentsW32SuaSchemasInvoicedataPropertiesBpayreferenceAllof1,
    Components1QdassaSchemasInvoicedataPropertiesBanksortcodeAllof1: Components1QdassaSchemasInvoicedataPropertiesBanksortcodeAllof1,
    Components1127QwqSchemasInvoicedataPropertiesBankibanAllof1: Components1127QwqSchemasInvoicedataPropertiesBankibanAllof1,
    Components1Roa72HSchemasInvoicedataPropertiesBankswiftAllof1: Components1Roa72HSchemasInvoicedataPropertiesBankswiftAllof1,
    Components1RrxgkvSchemasInvoicedataPropertiesBankbsbAllof1: Components1RrxgkvSchemasInvoicedataPropertiesBankbsbAllof1,
    ComponentsWv2QrxSchemasInvoicedataPropertiesCustomercontactnameAllof1: ComponentsWv2QrxSchemasInvoicedataPropertiesCustomercontactnameAllof1,
    Components1O8OpknSchemasInvoicedataPropertiesCustomercompanynameAllof1: Components1O8OpknSchemasInvoicedataPropertiesCustomercompanynameAllof1,
    Components1P4Fl61SchemasInvoicedataPropertiesSuppliercompanynameAllof1: Components1P4Fl61SchemasInvoicedataPropertiesSuppliercompanynameAllof1,
    Components1YsiqwnSchemasInvoicedataPropertiesCustomerphonenumberAllof1: Components1YsiqwnSchemasInvoicedataPropertiesCustomerphonenumberAllof1,
    Components1Hr2XldSchemasInvoicedataPropertiesSupplierphonenumberAllof1: Components1Hr2XldSchemasInvoicedataPropertiesSupplierphonenumberAllof1,
    Components1Fe3VqtSchemasInvoicedataPropertiesSupplierfaxAllof1: Components1Fe3VqtSchemasInvoicedataPropertiesSupplierfaxAllof1,
    Components1Y7HcurSchemasInvoicedataPropertiesCustomeremailAllof1: Components1Y7HcurSchemasInvoicedataPropertiesCustomeremailAllof1,
    Components10Thcs2SchemasInvoicedataPropertiesSupplieremailAllof1: Components10Thcs2SchemasInvoicedataPropertiesSupplieremailAllof1,
    Components17JmwpjSchemasInvoicedataPropertiesSupplierwebsiteAllof1: Components17JmwpjSchemasInvoicedataPropertiesSupplierwebsiteAllof1,
    Components17Ashz6SchemasInvoicePropertiesMetaAllof1: Components17Ashz6SchemasInvoicePropertiesMetaAllof1,
    PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema: PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema,
    User: User,
    Paths1Y6A2MfUsersPostResponses201ContentApplicationJsonSchemaAllof1: Paths1Y6A2MfUsersPostResponses201ContentApplicationJsonSchemaAllof1,
    ResumeRequestBody: ResumeRequestBody,
    RedactedResumeRequestBody: RedactedResumeRequestBody,
    JobDescriptionRequestBody: JobDescriptionRequestBody,
    IndexRequestBody: IndexRequestBody,
    InvoiceRequestBody: InvoiceRequestBody,
    InvoiceMeta: InvoiceMeta,
    ResumeSearchDetailLocationValue: ResumeSearchDetailLocationValue,
    JobDescriptionSearchDetailLocationValue: JobDescriptionSearchDetailLocationValue,
    ResumeSearchDetailEducationValueItem: ResumeSearchDetailEducationValueItem,
    ResumeSearchDetailSkillsValueItem: ResumeSearchDetailSkillsValueItem,
    ResumeSearchDetailLanguagesValueItem: ResumeSearchDetailLanguagesValueItem,
    ResumeSearchDetailOccupationGroupValueItem: ResumeSearchDetailOccupationGroupValueItem,
    JobDescriptionSearchDetailOccupationGroupValueItem: JobDescriptionSearchDetailOccupationGroupValueItem,
    JobTitleAnnotation: JobTitleAnnotation,
    TextAnnotation: TextAnnotation,
    DateAnnotation: DateAnnotation,
    LanguageAnnotation: LanguageAnnotation,
    SkillAnnotation: SkillAnnotation,
    ExpectedRemunerationAnnotation: ExpectedRemunerationAnnotation,
    LocationAnnotation: LocationAnnotation,
    YearsExperienceAnnotation: YearsExperienceAnnotation,
    EnumAnnotationSerializer: EnumAnnotationSerializer,
    InvoiceDataPaymentAmountBase: InvoiceDataPaymentAmountBase,
    InvoiceDataPaymentAmountTax: InvoiceDataPaymentAmountTax,
    InvoiceDataPaymentAmountTotal: InvoiceDataPaymentAmountTotal,
    InvoiceDataPaymentAmountPaid: InvoiceDataPaymentAmountPaid,
    InvoiceDataPaymentAmountDue: InvoiceDataPaymentAmountDue,
    InvoiceDataInvoiceNumber: InvoiceDataInvoiceNumber,
    InvoiceDataInvoicePurchaseOrderNumber: InvoiceDataInvoicePurchaseOrderNumber,
    InvoiceDataSupplierBusinessNumber: InvoiceDataSupplierBusinessNumber,
    InvoiceDataCustomerNumber: InvoiceDataCustomerNumber,
    InvoiceDataCustomerBusinessNumber: InvoiceDataCustomerBusinessNumber,
    InvoiceDataPaymentReference: InvoiceDataPaymentReference,
    InvoiceDataBankAccountNumber: InvoiceDataBankAccountNumber,
    InvoiceDataSupplierVat: InvoiceDataSupplierVat,
    InvoiceDataCustomerVat: InvoiceDataCustomerVat,
    InvoiceDataBpayBillerCode: InvoiceDataBpayBillerCode,
    InvoiceDataBpayReference: InvoiceDataBpayReference,
    InvoiceDataBankSortCode: InvoiceDataBankSortCode,
    InvoiceDataBankIban: InvoiceDataBankIban,
    InvoiceDataBankSwift: InvoiceDataBankSwift,
    InvoiceDataBankBsb: InvoiceDataBankBsb,
    InvoiceDataCustomerContactName: InvoiceDataCustomerContactName,
    InvoiceDataCustomerCompanyName: InvoiceDataCustomerCompanyName,
    InvoiceDataSupplierCompanyName: InvoiceDataSupplierCompanyName,
    InvoiceDataCustomerPhoneNumber: InvoiceDataCustomerPhoneNumber,
    InvoiceDataSupplierPhoneNumber: InvoiceDataSupplierPhoneNumber,
    InvoiceDataSupplierFax: InvoiceDataSupplierFax,
    InvoiceDataCustomerEmail: InvoiceDataCustomerEmail,
    InvoiceDataSupplierEmail: InvoiceDataSupplierEmail,
    InvoiceDataSupplierWebsite: InvoiceDataSupplierWebsite,
    PathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema: PathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema
});

const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const offset = {
    parameterPath: ["options", "offset"],
    mapper: {
        constraints: {
            InclusiveMinimum: 0
        },
        serializedName: "offset",
        type: {
            name: "Number"
        }
    }
};
const limit = {
    parameterPath: ["options", "limit"],
    mapper: {
        defaultValue: 300,
        constraints: {
            InclusiveMaximum: 300,
            InclusiveMinimum: 1
        },
        serializedName: "limit",
        type: {
            name: "Number"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "multipart/form-data",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const file = {
    parameterPath: ["options", "file"],
    mapper: {
        serializedName: "file",
        type: {
            name: "Stream"
        }
    }
};
const url = {
    parameterPath: ["options", "url"],
    mapper: {
        serializedName: "url",
        type: {
            name: "String"
        }
    }
};
const data = {
    parameterPath: ["options", "data"],
    mapper: ResumeData
};
const identifier = {
    parameterPath: ["options", "identifier"],
    mapper: {
        serializedName: "identifier",
        type: {
            name: "String"
        }
    }
};
const fileName = {
    parameterPath: ["options", "fileName"],
    mapper: {
        serializedName: "fileName",
        type: {
            name: "String"
        }
    }
};
const wait = {
    parameterPath: ["options", "wait"],
    mapper: {
        defaultValue: "true",
        serializedName: "wait",
        type: {
            name: "String"
        }
    }
};
const language = {
    parameterPath: ["options", "language"],
    mapper: {
        serializedName: "language",
        type: {
            name: "String"
        }
    }
};
const expiryTime = {
    parameterPath: ["options", "expiryTime"],
    mapper: {
        serializedName: "expiryTime",
        type: {
            name: "String"
        }
    }
};
const accept1 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const identifier1 = {
    parameterPath: "identifier",
    mapper: {
        serializedName: "identifier",
        required: true,
        type: {
            name: "String"
        }
    }
};
const format = {
    parameterPath: ["options", "format"],
    mapper: {
        serializedName: "format",
        type: {
            name: "String"
        }
    }
};
const contentType1 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const body = {
    parameterPath: "body",
    mapper: ResumeData
};
const redactHeadshot = {
    parameterPath: ["options", "redactHeadshot"],
    mapper: {
        defaultValue: "true",
        serializedName: "redactHeadshot",
        type: {
            name: "String"
        }
    }
};
const redactPersonalDetails = {
    parameterPath: ["options", "redactPersonalDetails"],
    mapper: {
        defaultValue: "true",
        serializedName: "redactPersonalDetails",
        type: {
            name: "String"
        }
    }
};
const redactWorkDetails = {
    parameterPath: ["options", "redactWorkDetails"],
    mapper: {
        defaultValue: "true",
        serializedName: "redactWorkDetails",
        type: {
            name: "String"
        }
    }
};
const redactEducationDetails = {
    parameterPath: ["options", "redactEducationDetails"],
    mapper: {
        defaultValue: "true",
        serializedName: "redactEducationDetails",
        type: {
            name: "String"
        }
    }
};
const redactReferees = {
    parameterPath: ["options", "redactReferees"],
    mapper: {
        defaultValue: "true",
        serializedName: "redactReferees",
        type: {
            name: "String"
        }
    }
};
const redactLocations = {
    parameterPath: ["options", "redactLocations"],
    mapper: {
        defaultValue: "true",
        serializedName: "redactLocations",
        type: {
            name: "String"
        }
    }
};
const redactDates = {
    parameterPath: ["options", "redactDates"],
    mapper: {
        defaultValue: "true",
        serializedName: "redactDates",
        type: {
            name: "String"
        }
    }
};
const redactGender = {
    parameterPath: ["options", "redactGender"],
    mapper: {
        defaultValue: "true",
        serializedName: "redactGender",
        type: {
            name: "String"
        }
    }
};
const body1 = {
    parameterPath: "body",
    mapper: ResumeSearchParameters
};
const resume = {
    parameterPath: "resume",
    mapper: {
        serializedName: "resume",
        required: true,
        type: {
            name: "String"
        }
    }
};
const jobDescription = {
    parameterPath: "jobDescription",
    mapper: {
        serializedName: "job_description",
        required: true,
        type: {
            name: "String"
        }
    }
};
const index = {
    parameterPath: ["options", "index"],
    mapper: {
        serializedName: "index",
        type: {
            name: "String"
        }
    }
};
const searchExpression = {
    parameterPath: ["options", "searchExpression"],
    mapper: {
        serializedName: "search_expression",
        type: {
            name: "String"
        }
    }
};
const jobTitlesWeight = {
    parameterPath: ["options", "jobTitlesWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0
        },
        serializedName: "job_titles_weight",
        type: {
            name: "Number"
        }
    }
};
const yearsExperienceWeight = {
    parameterPath: ["options", "yearsExperienceWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0
        },
        serializedName: "years_experience_weight",
        type: {
            name: "Number"
        }
    }
};
const locationsWeight = {
    parameterPath: ["options", "locationsWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0
        },
        serializedName: "locations_weight",
        type: {
            name: "Number"
        }
    }
};
const languagesWeight = {
    parameterPath: ["options", "languagesWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0
        },
        serializedName: "languages_weight",
        type: {
            name: "Number"
        }
    }
};
const skillsWeight = {
    parameterPath: ["options", "skillsWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0
        },
        serializedName: "skills_weight",
        type: {
            name: "Number"
        }
    }
};
const educationWeight = {
    parameterPath: ["options", "educationWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0
        },
        serializedName: "education_weight",
        type: {
            name: "Number"
        }
    }
};
const searchExpressionWeight = {
    parameterPath: ["options", "searchExpressionWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0
        },
        serializedName: "search_expression_weight",
        type: {
            name: "Number"
        }
    }
};
const socCodesWeight = {
    parameterPath: ["options", "socCodesWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0
        },
        serializedName: "soc_codes_weight",
        type: {
            name: "Number"
        }
    }
};
const managementLevelWeight = {
    parameterPath: ["options", "managementLevelWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0
        },
        serializedName: "management_level_weight",
        type: {
            name: "Number"
        }
    }
};
const body2 = {
    parameterPath: "body",
    mapper: ResumeSearchConfig
};
const body3 = {
    parameterPath: ["options", "body"],
    mapper: Paths2T1Oc0ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema
};
const body4 = {
    parameterPath: "body",
    mapper: JobDescriptionSearchParameters
};
const body5 = {
    parameterPath: "body",
    mapper: JobDescriptionSearchConfig
};
const body6 = {
    parameterPath: ["options", "body"],
    mapper: PathsFqn8P8JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema
};
const documentType = {
    parameterPath: ["options", "documentType"],
    mapper: {
        serializedName: "document_type",
        type: {
            name: "String"
        }
    }
};
const name = {
    parameterPath: ["options", "name"],
    mapper: {
        serializedName: "name",
        type: {
            name: "String"
        }
    }
};
const documentType1 = {
    parameterPath: ["options", "documentType"],
    mapper: {
        serializedName: "documentType",
        type: {
            name: "String"
        }
    }
};
const name1 = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body7 = {
    parameterPath: "body",
    mapper: PathsGpptmIndexNameDocumentsPostRequestbodyContentApplicationJsonSchema
};
const id = {
    parameterPath: ["options", "id"],
    mapper: {
        serializedName: "id",
        type: {
            name: "Number"
        }
    }
};
const username = {
    parameterPath: "username",
    mapper: {
        serializedName: "username",
        required: true,
        type: {
            name: "String"
        }
    }
};
const email = {
    parameterPath: ["options", "email"],
    mapper: {
        serializedName: "email",
        type: {
            name: "String"
        }
    }
};
const apiKey = {
    parameterPath: ["options", "apiKey"],
    mapper: {
        serializedName: "apiKey",
        type: {
            name: "String"
        }
    }
};

class AffindaAPIContext extends coreClient.ServiceClient {
    /**
     * Initializes a new instance of the AffindaAPIContext class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials, options) {
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-affinda/2.3.1`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        if (!options.credentialScopes) {
            options.credentialScopes = ["https://management.azure.com/.default"];
        }
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, baseUri: options.endpoint || "https://api.affinda.com/v2" });
        super(optionsWithDefaults);
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://api.affinda.com/v2";
    }
}

class AffindaAPI extends AffindaAPIContext {
    /**
     * Initializes a new instance of the AffindaAPI class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials, options) {
        super(credentials, options);
    }
    /**
     * Returns all the resume summaries for that user, limited to 300 per page.
     * @param options The options parameters.
     */
    getAllResumes(options) {
        return this.sendOperationRequest({ options }, getAllResumesOperationSpec);
    }
    /**
     * Uploads a resume for parsing. When successful, returns an `identifier` in the response for
     * subsequent use with the [/resumes/{identifier}](#get-/resumes/-identifier-) endpoint to check
     * processing status and retrieve results.<br/>
     * Resumes can be uploaded as a file or a URL. In addition, data can be added directly if users want to
     * upload directly without parsing any resume file. For uploading resume data, the `data` argument
     * provided must be a JSON-encoded string. Data uploads will not impact upon parsing credits.
     * @param options The options parameters.
     */
    createResume(options) {
        return this.sendOperationRequest({ options }, createResumeOperationSpec);
    }
    /**
     * Returns all the parse results for that resume if processing is completed.
     * The `identifier` is the unique ID returned after POST-ing the resume via the
     * [/resumes](#post-/resumes) endpoint.
     * @param identifier Document identifier
     * @param options The options parameters.
     */
    getResume(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getResumeOperationSpec);
    }
    /**
     * Update data of a parsed resume.
     * The `identifier` is the unique ID returned after POST-ing the resume via the
     * [/resumes](#post-/resumes) endpoint.
     * @param identifier Resume identifier
     * @param body Resume data to update
     * @param options The options parameters.
     */
    updateResumeData(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, updateResumeDataOperationSpec);
    }
    /**
     * Deletes the specified resume from the database
     * @param identifier Resume identifier
     * @param options The options parameters.
     */
    deleteResume(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, deleteResumeOperationSpec);
    }
    /**
     * Returns all the redacted resume information for that resume
     * @param options The options parameters.
     */
    getAllRedactedResumes(options) {
        return this.sendOperationRequest({ options }, getAllRedactedResumesOperationSpec);
    }
    /**
     * Uploads a resume for redacting.
     * @param options The options parameters.
     */
    createRedactedResume(options) {
        return this.sendOperationRequest({ options }, createRedactedResumeOperationSpec);
    }
    /**
     * Returns all the redaction results for that resume if processing is completed.
     * The `identifier` is the unique ID returned after POST-ing the resume via the
     * [/redacted_resumes](#post-/redacted_resumes) endpoint.
     * @param identifier Document identifier
     * @param options The options parameters.
     */
    getRedactedResume(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getRedactedResumeOperationSpec);
    }
    /**
     * Deletes the specified resume from the database
     * @param identifier Document identifier
     * @param options The options parameters.
     */
    deleteRedactedResume(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, deleteRedactedResumeOperationSpec);
    }
    /**
     * Searches through parsed resumes. Users have 3 options to create a search:<br /><br /> 1.	Match to a
     * job description - a parsed job description is used to find candidates that suit it<br /> 2.	Match to
     * a resume - a parsed resume is used to find other candidates that have similar attributes<br /> 3.
     * Search using custom criteria<br /><br /> Users should only populate 1 of jobDescription, resume or
     * the custom criteria.
     * @param body Search parameters
     * @param options The options parameters.
     */
    createResumeSearch(body, options) {
        return this.sendOperationRequest({ body, options }, createResumeSearchOperationSpec);
    }
    /**
     * This contains more detailed information about the matching score of the search criteria, or which
     * search criteria is missing in this resume.
     * The `identifier` is the unique ID returned via the [/resume_search](#post-/resume_search) endpoint.
     * @param identifier Resume identifier
     * @param body Search parameters
     * @param options The options parameters.
     */
    getResumeSearchDetail(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, getResumeSearchDetailOperationSpec);
    }
    /**
     * Get the matching score between a resume and a job description. The score ranges between 0 and 1,
     * with 0 being not a match at all, and 1 being perfect match.<br/> Note, this score will not directly
     * match the score returned from POST
     * [/resume_search/details/{identifier}](#post-/resume_search/details/-identifier-).
     * @param resume Identify the resume to match.
     * @param jobDescription Identify the job description to match.
     * @param options The options parameters.
     */
    getResumeSearchMatch(resume, jobDescription, options) {
        return this.sendOperationRequest({ resume, jobDescription, options }, getResumeSearchMatchOperationSpec);
    }
    /**
     * Return configurations such as which fields can be displayed in the logged in user's embeddable
     * resume search tool, what are their weights, what is the maximum number of results that can be
     * returned, etc.
     * @param options The options parameters.
     */
    getResumeSearchConfig(options) {
        return this.sendOperationRequest({ options }, getResumeSearchConfigOperationSpec);
    }
    /**
     * Update configurations such as which fields can be displayed in the logged in user's embeddable
     * resume search tool, what are their weights, what is the maximum number of results that can be
     * returned, etc.
     * @param body
     * @param options The options parameters.
     */
    updateResumeSearchConfig(body, options) {
        return this.sendOperationRequest({ body, options }, updateResumeSearchConfigOperationSpec);
    }
    /**
     * Create and return a signed URL of the resume search tool which then can be embedded on a web page.
     * An optional parameter `config_override` can be passed to override the user-level configurations of
     * the embeddable resume search tool.
     * @param options The options parameters.
     */
    createResumeSearchEmbedUrl(options) {
        return this.sendOperationRequest({ options }, createResumeSearchEmbedUrlOperationSpec);
    }
    /**
     * Returns all the job descriptions for that user, limited to 300 per page.
     * @param options The options parameters.
     */
    getAllJobDescriptions(options) {
        return this.sendOperationRequest({ options }, getAllJobDescriptionsOperationSpec);
    }
    /**
     * Uploads a job description for parsing.
     * When successful, returns an `identifier` in the response for subsequent use with the
     * [/job_descriptions/{identifier}](#get-/job_descriptions/-identifier-) endpoint to check processing
     * status and retrieve results.
     * Job Descriptions can be uploaded as a file or a URL.
     * @param options The options parameters.
     */
    createJobDescription(options) {
        return this.sendOperationRequest({ options }, createJobDescriptionOperationSpec);
    }
    /**
     * Returns all the results for that job description if processing is completed.
     * The `identifier` is the unique ID returned after POST-ing the resume via the
     * [/job_descriptions](#post-/job_descriptions) endpoint.
     * @param identifier Document identifier
     * @param options The options parameters.
     */
    getJobDescription(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getJobDescriptionOperationSpec);
    }
    /**
     * Deletes the specified job description from the database
     * @param identifier Document identifier
     * @param options The options parameters.
     */
    deleteJobDescription(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, deleteJobDescriptionOperationSpec);
    }
    /**
     * Searches through parsed job descriptions. You can search with custom criterias or a resume.
     * @param body Search parameters
     * @param options The options parameters.
     */
    createJobDescriptionSearch(body, options) {
        return this.sendOperationRequest({ body, options }, createJobDescriptionSearchOperationSpec);
    }
    /**
     * This contains more detailed information about the matching score of the search criteria, or which
     * search criteria is missing in this job description.
     * The `identifier` is the unique ID returned via the
     * [/job_description_search](#post-/job_description_search) endpoint.
     * @param identifier Job Description identifier
     * @param body Search parameters
     * @param options The options parameters.
     */
    getJobDescriptionSearchDetail(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, getJobDescriptionSearchDetailOperationSpec);
    }
    /**
     * Return configurations such as which fields can be displayed in the logged in user's embeddable job
     * description search tool, what are their weights, what is the maximum number of results that can be
     * returned, etc.
     * @param options The options parameters.
     */
    getJobDescriptionSearchConfig(options) {
        return this.sendOperationRequest({ options }, getJobDescriptionSearchConfigOperationSpec);
    }
    /**
     * Update configurations such as which fields can be displayed in the logged in user's embeddable job
     * description search tool, what are their weights, what is the maximum number of results that can be
     * returned, etc.
     * @param body
     * @param options The options parameters.
     */
    updateJobDescriptionSearchConfig(body, options) {
        return this.sendOperationRequest({ body, options }, updateJobDescriptionSearchConfigOperationSpec);
    }
    /**
     * Create and return a signed URL of the job description search tool which then can be embedded on a
     * web page. An optional parameter `config_override` can be passed to override the user-level
     * configurations of the embeddable search tool.
     * @param options The options parameters.
     */
    createJobDescriptionSearchEmbedUrl(options) {
        return this.sendOperationRequest({ options }, createJobDescriptionSearchEmbedUrlOperationSpec);
    }
    /**
     * Returns all the indexes
     * @param options The options parameters.
     */
    getAllIndexes(options) {
        return this.sendOperationRequest({ options }, getAllIndexesOperationSpec);
    }
    /**
     * Create an index for the search tool
     * @param options The options parameters.
     */
    createIndex(options) {
        return this.sendOperationRequest({ options }, createIndexOperationSpec);
    }
    /**
     * Deletes the specified index from the database
     * @param name Index name
     * @param options The options parameters.
     */
    deleteIndex(name, options) {
        return this.sendOperationRequest({ name, options }, deleteIndexOperationSpec);
    }
    /**
     * Returns all the indexed documents for that index
     * @param name Index name
     * @param options The options parameters.
     */
    getAllIndexDocuments(name, options) {
        return this.sendOperationRequest({ name, options }, getAllIndexDocumentsOperationSpec);
    }
    /**
     * Create an indexed document for the search tool
     * @param name Index name
     * @param body Document to index
     * @param options The options parameters.
     */
    createIndexDocument(name, body, options) {
        return this.sendOperationRequest({ name, body, options }, createIndexDocumentOperationSpec);
    }
    /**
     * Delete the specified indexed document from the database
     * @param name Index name
     * @param identifier Document identifier
     * @param options The options parameters.
     */
    deleteIndexDocument(name, identifier, options) {
        return this.sendOperationRequest({ name, identifier, options }, deleteIndexDocumentOperationSpec);
    }
    /**
     * Returns all the invoice summaries for that user, limited to 300 per page.
     * @param options The options parameters.
     */
    getAllInvoices(options) {
        return this.sendOperationRequest({ options }, getAllInvoicesOperationSpec);
    }
    /**
     * Uploads an invoice for parsing.
     * When successful, returns an `identifier` in the response for subsequent use with the
     * [/invoices/{identifier}](#get-/invoices/-identifier-) endpoint to check processing status and
     * retrieve results.
     * @param options The options parameters.
     */
    createInvoice(options) {
        return this.sendOperationRequest({ options }, createInvoiceOperationSpec);
    }
    /**
     * Returns all the parse results for that invoice if processing is completed.
     * The `identifier` is the unique ID returned after POST-ing the invoice via the
     * [/invoices](#post-/invoices) endpoint.
     * @param identifier Document identifier
     * @param options The options parameters.
     */
    getInvoice(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getInvoiceOperationSpec);
    }
    /**
     * Delete the specified invoice from the database. Note, any invoices deleted from the database will no
     * longer be used in any tailored customer models.
     * @param identifier Invoice identifier
     * @param options The options parameters.
     */
    deleteInvoice(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, deleteInvoiceOperationSpec);
    }
    /**
     * Returns the list of searchable occupation groups.
     * @param options The options parameters.
     */
    listOccupationGroups(options) {
        return this.sendOperationRequest({ options }, listOccupationGroupsOperationSpec);
    }
    /**
     * Returns all the users
     * @param options The options parameters.
     */
    getAllUsers(options) {
        return this.sendOperationRequest({ options }, getAllUsersOperationSpec);
    }
    /**
     * Create an user as part of your account
     * @param username
     * @param options The options parameters.
     */
    createUser(username, options) {
        return this.sendOperationRequest({ username, options }, createUserOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getAllResumesOperationSpec = {
    path: "/resumes",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GetAllDocumentsResults
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    queryParameters: [offset, limit],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const createResumeOperationSpec = {
    path: "/resumes",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Resume
        },
        201: {
            bodyMapper: Resume
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    formDataParameters: [
        file,
        url,
        data,
        identifier,
        fileName,
        wait,
        language,
        expiryTime
    ],
    urlParameters: [$host],
    headerParameters: [contentType, accept1],
    serializer
};
const getResumeOperationSpec = {
    path: "/resumes/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Resume
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    queryParameters: [format],
    urlParameters: [$host, identifier1],
    headerParameters: [accept],
    serializer
};
const updateResumeDataOperationSpec = {
    path: "/resumes/{identifier}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ResumeData
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    requestBody: body,
    urlParameters: [$host, identifier1],
    headerParameters: [accept, contentType1],
    mediaType: "json",
    serializer
};
const deleteResumeOperationSpec = {
    path: "/resumes/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    urlParameters: [$host, identifier1],
    headerParameters: [accept],
    serializer
};
const getAllRedactedResumesOperationSpec = {
    path: "/redacted_resumes",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GetAllDocumentsResults
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    queryParameters: [offset, limit],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const createRedactedResumeOperationSpec = {
    path: "/redacted_resumes",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RedactedResume
        },
        201: {
            bodyMapper: RedactedResume
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    formDataParameters: [
        file,
        url,
        identifier,
        fileName,
        wait,
        language,
        expiryTime,
        redactHeadshot,
        redactPersonalDetails,
        redactWorkDetails,
        redactEducationDetails,
        redactReferees,
        redactLocations,
        redactDates,
        redactGender
    ],
    urlParameters: [$host],
    headerParameters: [contentType, accept1],
    serializer
};
const getRedactedResumeOperationSpec = {
    path: "/redacted_resumes/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RedactedResume
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    urlParameters: [$host, identifier1],
    headerParameters: [accept],
    serializer
};
const deleteRedactedResumeOperationSpec = {
    path: "/redacted_resumes/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    urlParameters: [$host, identifier1],
    headerParameters: [accept],
    serializer
};
const createResumeSearchOperationSpec = {
    path: "/resume_search",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: ResumeSearch
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    requestBody: body1,
    queryParameters: [offset, limit],
    urlParameters: [$host],
    headerParameters: [accept, contentType1],
    mediaType: "json",
    serializer
};
const getResumeSearchDetailOperationSpec = {
    path: "/resume_search/details/{identifier}",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ResumeSearchDetail
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    requestBody: body1,
    urlParameters: [$host, identifier1],
    headerParameters: [accept, contentType1],
    mediaType: "json",
    serializer
};
const getResumeSearchMatchOperationSpec = {
    path: "/resume_search/match",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResumeSearchMatch
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    queryParameters: [
        resume,
        jobDescription,
        index,
        searchExpression,
        jobTitlesWeight,
        yearsExperienceWeight,
        locationsWeight,
        languagesWeight,
        skillsWeight,
        educationWeight,
        searchExpressionWeight,
        socCodesWeight,
        managementLevelWeight
    ],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const getResumeSearchConfigOperationSpec = {
    path: "/resume_search/config",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResumeSearchConfig
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const updateResumeSearchConfigOperationSpec = {
    path: "/resume_search/config",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ResumeSearchConfig
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    requestBody: body2,
    urlParameters: [$host],
    headerParameters: [accept, contentType1],
    mediaType: "json",
    serializer
};
const createResumeSearchEmbedUrlOperationSpec = {
    path: "/resume_search/embed",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ResumeSearchEmbed
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    requestBody: body3,
    urlParameters: [$host],
    headerParameters: [accept, contentType1],
    mediaType: "json",
    serializer
};
const getAllJobDescriptionsOperationSpec = {
    path: "/job_descriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GetAllJobDescriptionsResults
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    queryParameters: [offset, limit],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const createJobDescriptionOperationSpec = {
    path: "/job_descriptions",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: JobDescription
        },
        201: {
            bodyMapper: JobDescription
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    formDataParameters: [
        file,
        url,
        identifier,
        fileName,
        wait,
        language,
        expiryTime
    ],
    urlParameters: [$host],
    headerParameters: [contentType, accept1],
    serializer
};
const getJobDescriptionOperationSpec = {
    path: "/job_descriptions/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobDescription
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    urlParameters: [$host, identifier1],
    headerParameters: [accept],
    serializer
};
const deleteJobDescriptionOperationSpec = {
    path: "/job_descriptions/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    urlParameters: [$host, identifier1],
    headerParameters: [accept],
    serializer
};
const createJobDescriptionSearchOperationSpec = {
    path: "/job_description_search",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: JobDescriptionSearch
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    requestBody: body4,
    queryParameters: [offset, limit],
    urlParameters: [$host],
    headerParameters: [accept, contentType1],
    mediaType: "json",
    serializer
};
const getJobDescriptionSearchDetailOperationSpec = {
    path: "/job_description_search/details/{identifier}",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: JobDescriptionSearchDetail
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    requestBody: body4,
    urlParameters: [$host, identifier1],
    headerParameters: [accept, contentType1],
    mediaType: "json",
    serializer
};
const getJobDescriptionSearchConfigOperationSpec = {
    path: "/job_description_search/config",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobDescriptionSearchConfig
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const updateJobDescriptionSearchConfigOperationSpec = {
    path: "/job_description_search/config",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: JobDescriptionSearchConfig
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    requestBody: body5,
    urlParameters: [$host],
    headerParameters: [accept, contentType1],
    mediaType: "json",
    serializer
};
const createJobDescriptionSearchEmbedUrlOperationSpec = {
    path: "/job_description_search/embed",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: JobDescriptionSearchEmbed
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    requestBody: body6,
    urlParameters: [$host],
    headerParameters: [accept, contentType1],
    mediaType: "json",
    serializer
};
const getAllIndexesOperationSpec = {
    path: "/index",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    queryParameters: [
        offset,
        limit,
        documentType
    ],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const createIndexOperationSpec = {
    path: "/index",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    formDataParameters: [name, documentType1],
    urlParameters: [$host],
    headerParameters: [contentType, accept1],
    serializer
};
const deleteIndexOperationSpec = {
    path: "/index/{name}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    urlParameters: [$host, name1],
    headerParameters: [accept],
    serializer
};
const getAllIndexDocumentsOperationSpec = {
    path: "/index/{name}/documents",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    urlParameters: [$host, name1],
    headerParameters: [accept],
    serializer
};
const createIndexDocumentOperationSpec = {
    path: "/index/{name}/documents",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    requestBody: body7,
    urlParameters: [$host, name1],
    headerParameters: [accept, contentType1],
    mediaType: "json",
    serializer
};
const deleteIndexDocumentOperationSpec = {
    path: "/index/{name}/documents/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    urlParameters: [$host, identifier1, name1],
    headerParameters: [accept],
    serializer
};
const getAllInvoicesOperationSpec = {
    path: "/invoices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GetAllInvoicesResults
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    queryParameters: [offset, limit],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const createInvoiceOperationSpec = {
    path: "/invoices",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Invoice
        },
        201: {
            bodyMapper: Invoice
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    formDataParameters: [
        file,
        url,
        identifier,
        fileName,
        wait,
        language,
        expiryTime
    ],
    urlParameters: [$host],
    headerParameters: [contentType, accept1],
    serializer
};
const getInvoiceOperationSpec = {
    path: "/invoices/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Invoice
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    urlParameters: [$host, identifier1],
    headerParameters: [accept],
    serializer
};
const deleteInvoiceOperationSpec = {
    path: "/invoices/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    urlParameters: [$host, identifier1],
    headerParameters: [accept],
    serializer
};
const listOccupationGroupsOperationSpec = {
    path: "/occupation_groups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "OccupationGroup" } }
                }
            }
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const getAllUsersOperationSpec = {
    path: "/users",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    queryParameters: [offset, limit],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const createUserOperationSpec = {
    path: "/users",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: PathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema
        },
        400: {
            bodyMapper: RequestError
        },
        401: {
            bodyMapper: RequestError
        },
        default: {
            bodyMapper: RequestError
        }
    },
    formDataParameters: [
        name,
        id,
        username,
        email,
        apiKey
    ],
    urlParameters: [$host],
    headerParameters: [contentType, accept1],
    serializer
};

class AffindaCredential {
    constructor(token) {
        this.token = token;
    }
    getToken(scopes, options) {
        return Promise.resolve({
            token: this.token,
            expiresOnTimestamp: 0
        });
    }
}

exports.AffindaAPI = AffindaAPI;
exports.AffindaAPIContext = AffindaAPIContext;
exports.AffindaCredential = AffindaCredential;
//# sourceMappingURL=index.js.map
