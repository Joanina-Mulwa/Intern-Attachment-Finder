{"version":3,"file":"angular-editor-toolbar.component.d.ts","sources":["angular-editor-toolbar.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, Renderer2 } from '@angular/core';\nimport { AngularEditorService, UploadResponse } from './angular-editor.service';\nimport { HttpResponse, HttpEvent } from '@angular/common/http';\nimport { CustomClass } from './config';\nimport { SelectOption } from './ae-select/ae-select.component';\nimport { Observable } from 'rxjs';\nexport declare class AngularEditorToolbarComponent {\n    private r;\n    private editorService;\n    private er;\n    private doc;\n    htmlMode: boolean;\n    linkSelected: boolean;\n    block: string;\n    fontName: string;\n    fontSize: string;\n    foreColour: any;\n    backColor: any;\n    headings: SelectOption[];\n    fontSizes: SelectOption[];\n    customClassId: string;\n    _customClasses: CustomClass[];\n    customClassList: SelectOption[];\n    tagMap: {\n        BLOCKQUOTE: string;\n        A: string;\n    };\n    select: string[];\n    buttons: string[];\n    id: string;\n    uploadUrl: string;\n    upload: (file: File) => Observable<HttpEvent<UploadResponse>>;\n    showToolbar: boolean;\n    fonts: SelectOption[];\n    set customClasses(classes: CustomClass[]);\n    set defaultFontName(value: string);\n    set defaultFontSize(value: string);\n    hiddenButtons: string[][];\n    execute: EventEmitter<string>;\n    myInputFile: ElementRef;\n    get isLinkButtonDisabled(): boolean;\n    constructor(r: Renderer2, editorService: AngularEditorService, er: ElementRef, doc: any);\n    /**\n     * Trigger command from editor header buttons\n     * @param command string from toolbar buttons\n     */\n    triggerCommand(command: string): void;\n    /**\n     * highlight editor buttons when cursor moved or positioning\n     */\n    triggerButtons(): void;\n    /**\n     * trigger highlight editor buttons when cursor moved or positioning in block\n     */\n    triggerBlocks(nodes: Node[]): void;\n    /**\n     * insert URL link\n     */\n    insertUrl(): void;\n    /**\n     * insert Video link\n     */\n    insertVideo(): void;\n    /** insert color */\n    insertColor(color: string, where: string): void;\n    /**\n     * set font Name/family\n     * @param foreColor string\n     */\n    setFontName(foreColor: string): void;\n    /**\n     * set font Size\n     * @param fontSize string\n     */\n    setFontSize(fontSize: string): void;\n    /**\n     * toggle editor mode (WYSIWYG or SOURCE)\n     * @param m boolean\n     */\n    setEditorMode(m: boolean): void;\n    /**\n     * Upload image when file is selected.\n     */\n    onFileChanged(event: any): void;\n    watchUploadImage(response: HttpResponse<{\n        imageUrl: string;\n    }>, event: any): void;\n    /**\n     * Set custom class\n     */\n    setCustomClass(classId: string): void;\n    isButtonHidden(name: string): boolean;\n    focus(): void;\n}\n"]}