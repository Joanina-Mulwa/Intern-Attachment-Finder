/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { createBuilder, targetFromTargetString, } from '@angular-devkit/architect';
import { tags } from '@angular-devkit/core';
import * as browserSync from 'browser-sync';
import { createProxyMiddleware } from 'http-proxy-middleware';
import { join, resolve as pathResolve } from 'path';
import { EMPTY, combineLatest, from, of, zip } from 'rxjs';
import { catchError, concatMap, debounce, debounceTime, delay, finalize, ignoreElements, map, mapTo, startWith, switchMap, tap, } from 'rxjs/operators';
import * as url from 'url';
import { getAvailablePort, spawnAsObservable, waitUntilServerIsListening } from './utils';
/** Log messages to ignore and not rely to the logger */
const IGNORED_STDOUT_MESSAGES = [
    'server listening on',
    'Angular is running in development mode. Call enableProdMode() to enable production mode.',
];
export function execute(options, context) {
    const browserTarget = targetFromTargetString(options.browserTarget);
    const serverTarget = targetFromTargetString(options.serverTarget);
    const getBaseUrl = (bs) => `${bs.getOption('scheme')}://${bs.getOption('host')}:${bs.getOption('port')}`;
    const browserTargetRun = context.scheduleTarget(browserTarget, {
        serviceWorker: false,
        watch: true,
        progress: options.progress,
    });
    const serverTargetRun = context.scheduleTarget(serverTarget, {
        watch: true,
        progress: options.progress,
    });
    const bsInstance = browserSync.create();
    context.logger.error(tags.stripIndents `
  ****************************************************************************************
  This is a simple server for use in testing or debugging Angular applications locally.
  It hasn't been reviewed for security issues.

  DON'T USE IT FOR PRODUCTION!
  ****************************************************************************************
 `);
    return zip(browserTargetRun, serverTargetRun, getAvailablePort()).pipe(switchMap(([br, sr, nodeServerPort]) => {
        return combineLatest([br.output, sr.output]).pipe(
        // This is needed so that if both server and browser emit close to each other
        // we only emit once. This typically happens on the first build.
        debounceTime(120), switchMap(([b, s]) => {
            if (!s.success || !b.success) {
                return of([b, s]);
            }
            return startNodeServer(s, nodeServerPort, context.logger, !!options.inspect).pipe(mapTo([b, s]), catchError((err) => {
                context.logger.error(`A server error has occurred.\n${mapErrorToMessage(err)}`);
                return EMPTY;
            }));
        }), map(([b, s]) => [
            {
                success: b.success && s.success,
                error: b.error || s.error,
            },
            nodeServerPort,
        ]), tap(([builderOutput]) => {
            if (builderOutput.success) {
                context.logger.info('\nCompiled successfully.');
            }
        }), debounce(([builderOutput]) => builderOutput.success && !options.inspect
            ? waitUntilServerIsListening(nodeServerPort)
            : EMPTY), finalize(() => {
            void br.stop();
            void sr.stop();
        }));
    }), concatMap(([builderOutput, nodeServerPort]) => {
        if (!builderOutput.success) {
            return of(builderOutput);
        }
        if (bsInstance.active) {
            bsInstance.reload();
            return of(builderOutput);
        }
        else {
            return from(initBrowserSync(bsInstance, nodeServerPort, options, context)).pipe(tap((bs) => {
                const baseUrl = getBaseUrl(bs);
                context.logger.info(tags.oneLine `
                **
                Angular Universal Live Development Server is listening on ${baseUrl},
                open your browser on ${baseUrl}
                **
              `);
            }), mapTo(builderOutput));
        }
    }), map((builderOutput) => ({
        success: builderOutput.success,
        error: builderOutput.error,
        baseUrl: bsInstance && getBaseUrl(bsInstance),
    })), finalize(() => {
        if (bsInstance) {
            bsInstance.exit();
            bsInstance.cleanup();
        }
    }), catchError((error) => of({
        success: false,
        error: mapErrorToMessage(error),
    })));
}
function startNodeServer(serverOutput, port, logger, inspectMode = false) {
    const outputPath = serverOutput.outputPath;
    const path = join(outputPath, 'main.js');
    const env = Object.assign(Object.assign({}, process.env), { PORT: '' + port });
    const args = ['--enable-source-maps', `"${path}"`];
    if (inspectMode) {
        args.unshift('--inspect-brk');
    }
    return of(null).pipe(delay(0), // Avoid EADDRINUSE error since it will cause the kill event to be finish.
    switchMap(() => spawnAsObservable('node', args, { env, shell: true })), tap(({ stderr, stdout }) => {
        if (stderr) {
            // Strip the webpack scheme (webpack://) from error log.
            logger.error(stderr.replace(/webpack:\/\//g, '.'));
        }
        if (stdout && !IGNORED_STDOUT_MESSAGES.some((x) => stdout.includes(x))) {
            logger.info(stdout);
        }
    }), ignoreElements(), 
    // Emit a signal after the process has been started
    startWith(undefined));
}
function initBrowserSync(browserSyncInstance, nodeServerPort, options, context) {
    return __awaiter(this, void 0, void 0, function* () {
        if (browserSyncInstance.active) {
            return browserSyncInstance;
        }
        const { port: browserSyncPort, open, host, publicHost, proxyConfig } = options;
        const bsPort = browserSyncPort || (yield getAvailablePort());
        const bsOptions = {
            proxy: {
                target: `localhost:${nodeServerPort}`,
                proxyOptions: {
                    xfwd: true,
                },
                proxyRes: [
                    (proxyRes) => {
                        if ('headers' in proxyRes) {
                            proxyRes.headers['cache-control'] = undefined;
                        }
                    },
                ],
                // proxyOptions is not in the typings
            },
            host,
            port: bsPort,
            ui: false,
            server: false,
            notify: false,
            ghostMode: false,
            logLevel: 'silent',
            open,
            https: getSslConfig(context.workspaceRoot, options),
        };
        const publicHostNormalized = publicHost && publicHost.endsWith('/')
            ? publicHost.substring(0, publicHost.length - 1)
            : publicHost;
        if (publicHostNormalized) {
            const { protocol, hostname, port, pathname } = url.parse(publicHostNormalized);
            const defaultSocketIoPath = '/browser-sync/socket.io';
            const defaultNamespace = '/browser-sync';
            const hasPathname = !!(pathname && pathname !== '/');
            const namespace = hasPathname ? pathname + defaultNamespace : defaultNamespace;
            const path = hasPathname ? pathname + defaultSocketIoPath : defaultSocketIoPath;
            bsOptions.socket = {
                namespace,
                path,
                domain: url.format({
                    protocol,
                    hostname,
                    port,
                }),
            };
            // When having a pathname we also need to create a reverse proxy because socket.io
            // will be listening on: 'http://localhost:4200/ssr/browser-sync/socket.io'
            // However users will typically have a reverse proxy that will redirect all matching requests
            // ex: http://testinghost.com/ssr -> http://localhost:4200 which will result in a 404.
            if (hasPathname) {
                // Remove leading slash
                // eslint-disable-next-line @typescript-eslint/no-unused-expressions
                (bsOptions.scriptPath = (p) => p.substring(1)),
                    (bsOptions.middleware = [
                        createProxyMiddleware(defaultSocketIoPath, {
                            target: url.format({
                                protocol: 'http',
                                hostname: host,
                                port: bsPort,
                                pathname: path,
                            }),
                            ws: true,
                            logLevel: 'silent',
                        }),
                    ]);
            }
        }
        if (proxyConfig) {
            if (!bsOptions.middleware) {
                bsOptions.middleware = [];
            }
            else if (!Array.isArray(bsOptions.middleware)) {
                bsOptions.middleware = [bsOptions.middleware];
            }
            bsOptions.middleware = [
                ...bsOptions.middleware,
                ...getProxyConfig(context.workspaceRoot, proxyConfig),
            ];
        }
        return new Promise((resolve, reject) => {
            browserSyncInstance.init(bsOptions, (error, bs) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(bs);
                }
            });
        });
    });
}
function mapErrorToMessage(error) {
    if (error instanceof Error) {
        return error.message;
    }
    if (typeof error === 'string') {
        return error;
    }
    return '';
}
function getSslConfig(root, options) {
    const { ssl, sslCert, sslKey } = options;
    if (ssl && sslCert && sslKey) {
        return {
            key: pathResolve(root, sslKey),
            cert: pathResolve(root, sslCert),
        };
    }
    return ssl;
}
function getProxyConfig(root, proxyConfig) {
    const proxyPath = pathResolve(root, proxyConfig);
    let proxySettings;
    try {
        proxySettings = require(proxyPath);
    }
    catch (error) {
        if (error.code === 'MODULE_NOT_FOUND') {
            throw new Error(`Proxy config file ${proxyPath} does not exist.`);
        }
        throw error;
    }
    const proxies = Array.isArray(proxySettings) ? proxySettings : [proxySettings];
    const createdProxies = [];
    for (const proxy of proxies) {
        for (const [key, context] of Object.entries(proxy)) {
            if (typeof key === 'string') {
                createdProxies.push(createProxyMiddleware(key.replace(/^\*$/, '**').replace(/\/\*$/, ''), context));
            }
            else {
                createdProxies.push(createProxyMiddleware(key, context));
            }
        }
    }
    return createdProxies;
}
export default createBuilder(execute);
//# sourceMappingURL=data:application/json;base64,